// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file v1/odachin/odachin.proto (package odachin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum odachin.Status
 */
export enum Status {
  /**
   * 成功
   *
   * @generated from enum value: SUCCESS = 0;
   */
  SUCCESS = 0,

  /**
   * 失敗
   *
   * @generated from enum value: FAILURE = 1;
   */
  FAILURE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Status)
proto3.util.setEnumType(Status, "odachin.Status", [
  { no: 0, name: "SUCCESS" },
  { no: 1, name: "FAILURE" },
]);

/**
 * @generated from enum odachin.Role
 */
export enum Role {
  /**
   * 親
   *
   * @generated from enum value: PARENT = 0;
   */
  PARENT = 0,

  /**
   * 子供
   *
   * @generated from enum value: CHILD = 1;
   */
  CHILD = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Role)
proto3.util.setEnumType(Role, "odachin.Role", [
  { no: 0, name: "PARENT" },
  { no: 1, name: "CHILD" },
]);

/**
 * @generated from enum odachin.DayOfWeek
 */
export enum DayOfWeek {
  /**
   * @generated from enum value: MONDAY = 0;
   */
  MONDAY = 0,

  /**
   * @generated from enum value: TUESDAY = 1;
   */
  TUESDAY = 1,

  /**
   * @generated from enum value: WEDNESDAY = 2;
   */
  WEDNESDAY = 2,

  /**
   * @generated from enum value: THURSDAY = 3;
   */
  THURSDAY = 3,

  /**
   * @generated from enum value: FRIDAY = 4;
   */
  FRIDAY = 4,

  /**
   * @generated from enum value: SATURDAY = 5;
   */
  SATURDAY = 5,

  /**
   * @generated from enum value: SUNDAY = 6;
   */
  SUNDAY = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(DayOfWeek)
proto3.util.setEnumType(DayOfWeek, "odachin.DayOfWeek", [
  { no: 0, name: "MONDAY" },
  { no: 1, name: "TUESDAY" },
  { no: 2, name: "WEDNESDAY" },
  { no: 3, name: "THURSDAY" },
  { no: 4, name: "FRIDAY" },
  { no: 5, name: "SATURDAY" },
  { no: 6, name: "SUNDAY" },
]);

/**
 * @generated from enum odachin.IntervalType
 */
export enum IntervalType {
  /**
   * n日ごと
   *
   * @generated from enum value: EVERY_N_DAY = 0;
   */
  EVERY_N_DAY = 0,

  /**
   * 毎週
   *
   * @generated from enum value: WEEKLY = 1;
   */
  WEEKLY = 1,

  /**
   * 毎月
   *
   * @generated from enum value: MONTHLY = 2;
   */
  MONTHLY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(IntervalType)
proto3.util.setEnumType(IntervalType, "odachin.IntervalType", [
  { no: 0, name: "EVERY_N_DAY" },
  { no: 1, name: "WEEKLY" },
  { no: 2, name: "MONTHLY" },
]);

/**
 * @generated from message odachin.CreateUserRequest
 */
export class CreateUserRequest extends Message<CreateUserRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string password = 4;
   */
  password = "";

  /**
   * @generated from field: odachin.Role role = 5;
   */
  role = Role.PARENT;

  constructor(data?: PartialMessage<CreateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.CreateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "role", kind: "enum", T: proto3.getEnumType(Role) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined, b: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserRequest, a, b);
  }
}

/**
 * @generated from message odachin.CreateUserResponse
 */
export class CreateUserResponse extends Message<CreateUserResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<CreateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.CreateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined, b: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined): boolean {
    return proto3.util.equals(CreateUserResponse, a, b);
  }
}

/**
 * @generated from message odachin.UpdateUserRequest
 */
export class UpdateUserRequest extends Message<UpdateUserRequest> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional string email = 2;
   */
  email?: string;

  /**
   * @generated from field: optional bytes profile_image = 4;
   */
  profileImage?: Uint8Array;

  constructor(data?: PartialMessage<UpdateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.UpdateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "profile_image", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined, b: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserRequest, a, b);
  }
}

/**
 * @generated from message odachin.LoginRequest
 */
export class LoginRequest extends Message<LoginRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<LoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.LoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRequest {
    return new LoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginRequest | PlainMessage<LoginRequest> | undefined, b: LoginRequest | PlainMessage<LoginRequest> | undefined): boolean {
    return proto3.util.equals(LoginRequest, a, b);
  }
}

/**
 * @generated from message odachin.LoginResponse
 */
export class LoginResponse extends Message<LoginResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<LoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.LoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResponse {
    return new LoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginResponse | PlainMessage<LoginResponse> | undefined, b: LoginResponse | PlainMessage<LoginResponse> | undefined): boolean {
    return proto3.util.equals(LoginResponse, a, b);
  }
}

/**
 * @generated from message odachin.CreateGroupRequest
 */
export class CreateGroupRequest extends Message<CreateGroupRequest> {
  /**
   * @generated from field: string family_name = 1;
   */
  familyName = "";

  constructor(data?: PartialMessage<CreateGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.CreateGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "family_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGroupRequest {
    return new CreateGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGroupRequest {
    return new CreateGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGroupRequest {
    return new CreateGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGroupRequest | PlainMessage<CreateGroupRequest> | undefined, b: CreateGroupRequest | PlainMessage<CreateGroupRequest> | undefined): boolean {
    return proto3.util.equals(CreateGroupRequest, a, b);
  }
}

/**
 * @generated from message odachin.InviteUserRequest
 */
export class InviteUserRequest extends Message<InviteUserRequest> {
  /**
   * @generated from field: string to_user_id = 1;
   */
  toUserId = "";

  constructor(data?: PartialMessage<InviteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.InviteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "to_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserRequest {
    return new InviteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined, b: InviteUserRequest | PlainMessage<InviteUserRequest> | undefined): boolean {
    return proto3.util.equals(InviteUserRequest, a, b);
  }
}

/**
 * @generated from message odachin.AcceptInvitationRequest
 */
export class AcceptInvitationRequest extends Message<AcceptInvitationRequest> {
  /**
   * @generated from field: uint64 invitation_id = 1;
   */
  invitationId = protoInt64.zero;

  constructor(data?: PartialMessage<AcceptInvitationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.AcceptInvitationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invitation_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptInvitationRequest {
    return new AcceptInvitationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptInvitationRequest {
    return new AcceptInvitationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptInvitationRequest {
    return new AcceptInvitationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AcceptInvitationRequest | PlainMessage<AcceptInvitationRequest> | undefined, b: AcceptInvitationRequest | PlainMessage<AcceptInvitationRequest> | undefined): boolean {
    return proto3.util.equals(AcceptInvitationRequest, a, b);
  }
}

/**
 * @generated from message odachin.RegisterRewardRequest
 */
export class RegisterRewardRequest extends Message<RegisterRewardRequest> {
  /**
   * @generated from field: string to_user_id = 1;
   */
  toUserId = "";

  /**
   * @generated from field: double amount = 2;
   */
  amount = 0;

  /**
   * @generated from field: string reason = 3;
   */
  reason = "";

  constructor(data?: PartialMessage<RegisterRewardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.RegisterRewardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "to_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRewardRequest {
    return new RegisterRewardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRewardRequest {
    return new RegisterRewardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRewardRequest {
    return new RegisterRewardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRewardRequest | PlainMessage<RegisterRewardRequest> | undefined, b: RegisterRewardRequest | PlainMessage<RegisterRewardRequest> | undefined): boolean {
    return proto3.util.equals(RegisterRewardRequest, a, b);
  }
}

/**
 * @generated from message odachin.DeleteRewardRequest
 */
export class DeleteRewardRequest extends Message<DeleteRewardRequest> {
  /**
   * @generated from field: uint64 reward_id = 1;
   */
  rewardId = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteRewardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.DeleteRewardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reward_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRewardRequest {
    return new DeleteRewardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRewardRequest {
    return new DeleteRewardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRewardRequest {
    return new DeleteRewardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRewardRequest | PlainMessage<DeleteRewardRequest> | undefined, b: DeleteRewardRequest | PlainMessage<DeleteRewardRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRewardRequest, a, b);
  }
}

/**
 * @generated from message odachin.RegisterAllowanceRequest
 */
export class RegisterAllowanceRequest extends Message<RegisterAllowanceRequest> {
  /**
   * @generated from field: string to_user_id = 1;
   */
  toUserId = "";

  /**
   * @generated from field: double amount = 2;
   */
  amount = 0;

  /**
   * @generated from field: odachin.IntervalType interval_type = 3;
   */
  intervalType = IntervalType.EVERY_N_DAY;

  /**
   * @generated from field: optional uint32 interval = 4;
   */
  interval?: number;

  /**
   * @generated from field: optional uint32 date = 5;
   */
  date?: number;

  /**
   * @generated from field: optional odachin.DayOfWeek day_of_week = 6;
   */
  dayOfWeek?: DayOfWeek;

  constructor(data?: PartialMessage<RegisterAllowanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.RegisterAllowanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "to_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "interval_type", kind: "enum", T: proto3.getEnumType(IntervalType) },
    { no: 4, name: "interval", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 5, name: "date", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 6, name: "day_of_week", kind: "enum", T: proto3.getEnumType(DayOfWeek), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterAllowanceRequest {
    return new RegisterAllowanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterAllowanceRequest {
    return new RegisterAllowanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterAllowanceRequest {
    return new RegisterAllowanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterAllowanceRequest | PlainMessage<RegisterAllowanceRequest> | undefined, b: RegisterAllowanceRequest | PlainMessage<RegisterAllowanceRequest> | undefined): boolean {
    return proto3.util.equals(RegisterAllowanceRequest, a, b);
  }
}

/**
 * @generated from message odachin.UpdateAllowanceRequest
 */
export class UpdateAllowanceRequest extends Message<UpdateAllowanceRequest> {
  /**
   * @generated from field: uint64 allowance_id = 1;
   */
  allowanceId = protoInt64.zero;

  /**
   * @generated from field: optional double amount = 2;
   */
  amount?: number;

  /**
   * @generated from field: optional odachin.IntervalType interval_type = 3;
   */
  intervalType?: IntervalType;

  /**
   * @generated from field: optional uint32 interval = 4;
   */
  interval?: number;

  /**
   * @generated from field: optional uint32 date = 5;
   */
  date?: number;

  /**
   * @generated from field: optional odachin.DayOfWeek day_of_week = 6;
   */
  dayOfWeek?: DayOfWeek;

  constructor(data?: PartialMessage<UpdateAllowanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.UpdateAllowanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allowance_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 3, name: "interval_type", kind: "enum", T: proto3.getEnumType(IntervalType), opt: true },
    { no: 4, name: "interval", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 5, name: "date", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 6, name: "day_of_week", kind: "enum", T: proto3.getEnumType(DayOfWeek), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAllowanceRequest {
    return new UpdateAllowanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAllowanceRequest {
    return new UpdateAllowanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAllowanceRequest {
    return new UpdateAllowanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAllowanceRequest | PlainMessage<UpdateAllowanceRequest> | undefined, b: UpdateAllowanceRequest | PlainMessage<UpdateAllowanceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAllowanceRequest, a, b);
  }
}

/**
 * @generated from message odachin.GetUserInfoRequest
 */
export class GetUserInfoRequest extends Message<GetUserInfoRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetUserInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.GetUserInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserInfoRequest {
    return new GetUserInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserInfoRequest {
    return new GetUserInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserInfoRequest {
    return new GetUserInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserInfoRequest | PlainMessage<GetUserInfoRequest> | undefined, b: GetUserInfoRequest | PlainMessage<GetUserInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetUserInfoRequest, a, b);
  }
}

/**
 * @generated from message odachin.GetUserInfoResponse
 */
export class GetUserInfoResponse extends Message<GetUserInfoResponse> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: odachin.Role role = 3;
   */
  role = Role.PARENT;

  /**
   * @generated from field: optional string avatar_image_url = 4;
   */
  avatarImageUrl?: string;

  constructor(data?: PartialMessage<GetUserInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "odachin.GetUserInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "enum", T: proto3.getEnumType(Role) },
    { no: 4, name: "avatar_image_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserInfoResponse {
    return new GetUserInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserInfoResponse {
    return new GetUserInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserInfoResponse {
    return new GetUserInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserInfoResponse | PlainMessage<GetUserInfoResponse> | undefined, b: GetUserInfoResponse | PlainMessage<GetUserInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetUserInfoResponse, a, b);
  }
}

