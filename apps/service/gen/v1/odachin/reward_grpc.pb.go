// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/odachin/reward.proto

package odachin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RewardService_RegisterReward_FullMethodName            = "/odachin.reward.RewardService/RegisterReward"
	RewardService_DeleteReward_FullMethodName              = "/odachin.reward.RewardService/DeleteReward"
	RewardService_GetRewardList_FullMethodName             = "/odachin.reward.RewardService/GetRewardList"
	RewardService_GetUncompletedRewardCount_FullMethodName = "/odachin.reward.RewardService/GetUncompletedRewardCount"
)

// RewardServiceClient is the client API for RewardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RewardServiceClient interface {
	RegisterReward(ctx context.Context, in *RegisterRewardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteReward(ctx context.Context, in *DeleteRewardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRewardList(ctx context.Context, in *GetRewardListRequest, opts ...grpc.CallOption) (*GetRewardListResponse, error)
	GetUncompletedRewardCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUncompletedRewardCountResponse, error)
}

type rewardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardServiceClient(cc grpc.ClientConnInterface) RewardServiceClient {
	return &rewardServiceClient{cc}
}

func (c *rewardServiceClient) RegisterReward(ctx context.Context, in *RegisterRewardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RewardService_RegisterReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardServiceClient) DeleteReward(ctx context.Context, in *DeleteRewardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RewardService_DeleteReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardServiceClient) GetRewardList(ctx context.Context, in *GetRewardListRequest, opts ...grpc.CallOption) (*GetRewardListResponse, error) {
	out := new(GetRewardListResponse)
	err := c.cc.Invoke(ctx, RewardService_GetRewardList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardServiceClient) GetUncompletedRewardCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUncompletedRewardCountResponse, error) {
	out := new(GetUncompletedRewardCountResponse)
	err := c.cc.Invoke(ctx, RewardService_GetUncompletedRewardCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RewardServiceServer is the server API for RewardService service.
// All implementations must embed UnimplementedRewardServiceServer
// for forward compatibility
type RewardServiceServer interface {
	RegisterReward(context.Context, *RegisterRewardRequest) (*emptypb.Empty, error)
	DeleteReward(context.Context, *DeleteRewardRequest) (*emptypb.Empty, error)
	GetRewardList(context.Context, *GetRewardListRequest) (*GetRewardListResponse, error)
	GetUncompletedRewardCount(context.Context, *emptypb.Empty) (*GetUncompletedRewardCountResponse, error)
	mustEmbedUnimplementedRewardServiceServer()
}

// UnimplementedRewardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRewardServiceServer struct {
}

func (UnimplementedRewardServiceServer) RegisterReward(context.Context, *RegisterRewardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterReward not implemented")
}
func (UnimplementedRewardServiceServer) DeleteReward(context.Context, *DeleteRewardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReward not implemented")
}
func (UnimplementedRewardServiceServer) GetRewardList(context.Context, *GetRewardListRequest) (*GetRewardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardList not implemented")
}
func (UnimplementedRewardServiceServer) GetUncompletedRewardCount(context.Context, *emptypb.Empty) (*GetUncompletedRewardCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUncompletedRewardCount not implemented")
}
func (UnimplementedRewardServiceServer) mustEmbedUnimplementedRewardServiceServer() {}

// UnsafeRewardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RewardServiceServer will
// result in compilation errors.
type UnsafeRewardServiceServer interface {
	mustEmbedUnimplementedRewardServiceServer()
}

func RegisterRewardServiceServer(s grpc.ServiceRegistrar, srv RewardServiceServer) {
	s.RegisterService(&RewardService_ServiceDesc, srv)
}

func _RewardService_RegisterReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServiceServer).RegisterReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardService_RegisterReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServiceServer).RegisterReward(ctx, req.(*RegisterRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardService_DeleteReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServiceServer).DeleteReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardService_DeleteReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServiceServer).DeleteReward(ctx, req.(*DeleteRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardService_GetRewardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServiceServer).GetRewardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardService_GetRewardList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServiceServer).GetRewardList(ctx, req.(*GetRewardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardService_GetUncompletedRewardCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardServiceServer).GetUncompletedRewardCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardService_GetUncompletedRewardCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardServiceServer).GetUncompletedRewardCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RewardService_ServiceDesc is the grpc.ServiceDesc for RewardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RewardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odachin.reward.RewardService",
	HandlerType: (*RewardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterReward",
			Handler:    _RewardService_RegisterReward_Handler,
		},
		{
			MethodName: "DeleteReward",
			Handler:    _RewardService_DeleteReward_Handler,
		},
		{
			MethodName: "GetRewardList",
			Handler:    _RewardService_GetRewardList_Handler,
		},
		{
			MethodName: "GetUncompletedRewardCount",
			Handler:    _RewardService_GetUncompletedRewardCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/odachin/reward.proto",
}
