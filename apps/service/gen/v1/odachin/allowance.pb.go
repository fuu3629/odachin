// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: v1/odachin/allowance.proto

package odachin

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DayOfWeek int32

const (
	DayOfWeek_MONDAY    DayOfWeek = 0
	DayOfWeek_TUESDAY   DayOfWeek = 1
	DayOfWeek_WEDNESDAY DayOfWeek = 2
	DayOfWeek_THURSDAY  DayOfWeek = 3
	DayOfWeek_FRIDAY    DayOfWeek = 4
	DayOfWeek_SATURDAY  DayOfWeek = 5
	DayOfWeek_SUNDAY    DayOfWeek = 6
)

// Enum value maps for DayOfWeek.
var (
	DayOfWeek_name = map[int32]string{
		0: "MONDAY",
		1: "TUESDAY",
		2: "WEDNESDAY",
		3: "THURSDAY",
		4: "FRIDAY",
		5: "SATURDAY",
		6: "SUNDAY",
	}
	DayOfWeek_value = map[string]int32{
		"MONDAY":    0,
		"TUESDAY":   1,
		"WEDNESDAY": 2,
		"THURSDAY":  3,
		"FRIDAY":    4,
		"SATURDAY":  5,
		"SUNDAY":    6,
	}
)

func (x DayOfWeek) Enum() *DayOfWeek {
	p := new(DayOfWeek)
	*p = x
	return p
}

func (x DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_odachin_allowance_proto_enumTypes[0].Descriptor()
}

func (DayOfWeek) Type() protoreflect.EnumType {
	return &file_v1_odachin_allowance_proto_enumTypes[0]
}

func (x DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayOfWeek.Descriptor instead.
func (DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_v1_odachin_allowance_proto_rawDescGZIP(), []int{0}
}

type Alloance_Type int32

const (
	Alloance_DAILY   Alloance_Type = 0 // 毎日
	Alloance_WEEKLY  Alloance_Type = 1 // 毎週
	Alloance_MONTHLY Alloance_Type = 2 // 毎月
)

// Enum value maps for Alloance_Type.
var (
	Alloance_Type_name = map[int32]string{
		0: "DAILY",
		1: "WEEKLY",
		2: "MONTHLY",
	}
	Alloance_Type_value = map[string]int32{
		"DAILY":   0,
		"WEEKLY":  1,
		"MONTHLY": 2,
	}
)

func (x Alloance_Type) Enum() *Alloance_Type {
	p := new(Alloance_Type)
	*p = x
	return p
}

func (x Alloance_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alloance_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_odachin_allowance_proto_enumTypes[1].Descriptor()
}

func (Alloance_Type) Type() protoreflect.EnumType {
	return &file_v1_odachin_allowance_proto_enumTypes[1]
}

func (x Alloance_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Alloance_Type.Descriptor instead.
func (Alloance_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_odachin_allowance_proto_rawDescGZIP(), []int{0, 0}
}

type Alloance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Alloance) Reset() {
	*x = Alloance{}
	mi := &file_v1_odachin_allowance_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Alloance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alloance) ProtoMessage() {}

func (x *Alloance) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_allowance_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alloance.ProtoReflect.Descriptor instead.
func (*Alloance) Descriptor() ([]byte, []int) {
	return file_v1_odachin_allowance_proto_rawDescGZIP(), []int{0}
}

type RegisterAllowanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToUserId      string                 `protobuf:"bytes,1,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id,omitempty"`
	Amount        float64                `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	IntervalType  Alloance_Type          `protobuf:"varint,3,opt,name=interval_type,json=intervalType,proto3,enum=odachin.allowance.Alloance_Type" json:"interval_type,omitempty"`
	Date          *uint32                `protobuf:"varint,4,opt,name=date,proto3,oneof" json:"date,omitempty"`
	DayOfWeek     *DayOfWeek             `protobuf:"varint,5,opt,name=day_of_week,json=dayOfWeek,proto3,enum=odachin.allowance.DayOfWeek,oneof" json:"day_of_week,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAllowanceRequest) Reset() {
	*x = RegisterAllowanceRequest{}
	mi := &file_v1_odachin_allowance_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAllowanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAllowanceRequest) ProtoMessage() {}

func (x *RegisterAllowanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_allowance_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAllowanceRequest.ProtoReflect.Descriptor instead.
func (*RegisterAllowanceRequest) Descriptor() ([]byte, []int) {
	return file_v1_odachin_allowance_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterAllowanceRequest) GetToUserId() string {
	if x != nil {
		return x.ToUserId
	}
	return ""
}

func (x *RegisterAllowanceRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RegisterAllowanceRequest) GetIntervalType() Alloance_Type {
	if x != nil {
		return x.IntervalType
	}
	return Alloance_DAILY
}

func (x *RegisterAllowanceRequest) GetDate() uint32 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

func (x *RegisterAllowanceRequest) GetDayOfWeek() DayOfWeek {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return DayOfWeek_MONDAY
}

type UpdateAllowanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AllowanceId   uint64                 `protobuf:"varint,1,opt,name=allowance_id,json=allowanceId,proto3" json:"allowance_id,omitempty"`
	Amount        *float64               `protobuf:"fixed64,2,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	IntervalType  *Alloance_Type         `protobuf:"varint,3,opt,name=interval_type,json=intervalType,proto3,enum=odachin.allowance.Alloance_Type,oneof" json:"interval_type,omitempty"`
	Date          *uint32                `protobuf:"varint,4,opt,name=date,proto3,oneof" json:"date,omitempty"`
	DayOfWeek     *DayOfWeek             `protobuf:"varint,5,opt,name=day_of_week,json=dayOfWeek,proto3,enum=odachin.allowance.DayOfWeek,oneof" json:"day_of_week,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAllowanceRequest) Reset() {
	*x = UpdateAllowanceRequest{}
	mi := &file_v1_odachin_allowance_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAllowanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllowanceRequest) ProtoMessage() {}

func (x *UpdateAllowanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_allowance_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllowanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateAllowanceRequest) Descriptor() ([]byte, []int) {
	return file_v1_odachin_allowance_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateAllowanceRequest) GetAllowanceId() uint64 {
	if x != nil {
		return x.AllowanceId
	}
	return 0
}

func (x *UpdateAllowanceRequest) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *UpdateAllowanceRequest) GetIntervalType() Alloance_Type {
	if x != nil && x.IntervalType != nil {
		return *x.IntervalType
	}
	return Alloance_DAILY
}

func (x *UpdateAllowanceRequest) GetDate() uint32 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

func (x *UpdateAllowanceRequest) GetDayOfWeek() DayOfWeek {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return DayOfWeek_MONDAY
}

type Allowance struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AllowanceId    uint64                 `protobuf:"varint,1,opt,name=allowance_id,json=allowanceId,proto3" json:"allowance_id,omitempty"`
	ToUserId       string                 `protobuf:"bytes,2,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id,omitempty"`
	ToUserName     string                 `protobuf:"bytes,3,opt,name=to_user_name,json=toUserName,proto3" json:"to_user_name,omitempty"`
	Amount         float64                `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	IntervalType   Alloance_Type          `protobuf:"varint,5,opt,name=interval_type,json=intervalType,proto3,enum=odachin.allowance.Alloance_Type" json:"interval_type,omitempty"`
	Date           *uint32                `protobuf:"varint,6,opt,name=date,proto3,oneof" json:"date,omitempty"`
	DayOfWeek      *DayOfWeek             `protobuf:"varint,7,opt,name=day_of_week,json=dayOfWeek,proto3,enum=odachin.allowance.DayOfWeek,oneof" json:"day_of_week,omitempty"`
	AvatarImageUrl *string                `protobuf:"bytes,8,opt,name=avatar_image_url,json=avatarImageUrl,proto3,oneof" json:"avatar_image_url,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Allowance) Reset() {
	*x = Allowance{}
	mi := &file_v1_odachin_allowance_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Allowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allowance) ProtoMessage() {}

func (x *Allowance) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_allowance_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allowance.ProtoReflect.Descriptor instead.
func (*Allowance) Descriptor() ([]byte, []int) {
	return file_v1_odachin_allowance_proto_rawDescGZIP(), []int{3}
}

func (x *Allowance) GetAllowanceId() uint64 {
	if x != nil {
		return x.AllowanceId
	}
	return 0
}

func (x *Allowance) GetToUserId() string {
	if x != nil {
		return x.ToUserId
	}
	return ""
}

func (x *Allowance) GetToUserName() string {
	if x != nil {
		return x.ToUserName
	}
	return ""
}

func (x *Allowance) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Allowance) GetIntervalType() Alloance_Type {
	if x != nil {
		return x.IntervalType
	}
	return Alloance_DAILY
}

func (x *Allowance) GetDate() uint32 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

func (x *Allowance) GetDayOfWeek() DayOfWeek {
	if x != nil && x.DayOfWeek != nil {
		return *x.DayOfWeek
	}
	return DayOfWeek_MONDAY
}

func (x *Allowance) GetAvatarImageUrl() string {
	if x != nil && x.AvatarImageUrl != nil {
		return *x.AvatarImageUrl
	}
	return ""
}

type GetAllowanceByFromUserIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Allowances    []*Allowance           `protobuf:"bytes,1,rep,name=allowances,proto3" json:"allowances,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllowanceByFromUserIdResponse) Reset() {
	*x = GetAllowanceByFromUserIdResponse{}
	mi := &file_v1_odachin_allowance_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllowanceByFromUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllowanceByFromUserIdResponse) ProtoMessage() {}

func (x *GetAllowanceByFromUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_allowance_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllowanceByFromUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetAllowanceByFromUserIdResponse) Descriptor() ([]byte, []int) {
	return file_v1_odachin_allowance_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllowanceByFromUserIdResponse) GetAllowances() []*Allowance {
	if x != nil {
		return x.Allowances
	}
	return nil
}

var File_v1_odachin_allowance_proto protoreflect.FileDescriptor

var file_v1_odachin_allowance_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x76, 0x31, 0x2f, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6f, 0x64,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x08, 0x41, 0x6c, 0x6c,
	0x6f, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b,
	0x4c, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10,
	0x02, 0x22, 0xba, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0x48,
	0x06, 0x1a, 0x04, 0x18, 0x1f, 0x28, 0x01, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x4f,
	0x66, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x01, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65,
	0x65, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x22, 0xcf,
	0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x64, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f,
	0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f,
	0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x03, 0x52, 0x09, 0x64, 0x61,
	0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x22, 0x86, 0x03, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x01, 0x52, 0x09,
	0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x60, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2a, 0x67, 0x0a, 0x09, 0x44,
	0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e, 0x44,
	0x41, 0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x55, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41,
	0x54, 0x55, 0x52, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x4e, 0x44,
	0x41, 0x59, 0x10, 0x06, 0x32, 0xab, 0x02, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b,
	0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x33, 0x2e,
	0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79,
	0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0xc4, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x75, 0x75, 0x33, 0x36,
	0x32, 0x39, 0x2f, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0xa2, 0x02, 0x03, 0x4f, 0x41, 0x58, 0xaa, 0x02, 0x11, 0x4f,
	0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0xca, 0x02, 0x11, 0x4f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x5c, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0xe2, 0x02, 0x1d, 0x4f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x5c, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x4f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x3a, 0x3a,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_v1_odachin_allowance_proto_rawDescOnce sync.Once
	file_v1_odachin_allowance_proto_rawDescData []byte
)

func file_v1_odachin_allowance_proto_rawDescGZIP() []byte {
	file_v1_odachin_allowance_proto_rawDescOnce.Do(func() {
		file_v1_odachin_allowance_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_odachin_allowance_proto_rawDesc), len(file_v1_odachin_allowance_proto_rawDesc)))
	})
	return file_v1_odachin_allowance_proto_rawDescData
}

var file_v1_odachin_allowance_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v1_odachin_allowance_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_v1_odachin_allowance_proto_goTypes = []any{
	(DayOfWeek)(0),                           // 0: odachin.allowance.DayOfWeek
	(Alloance_Type)(0),                       // 1: odachin.allowance.Alloance.Type
	(*Alloance)(nil),                         // 2: odachin.allowance.Alloance
	(*RegisterAllowanceRequest)(nil),         // 3: odachin.allowance.RegisterAllowanceRequest
	(*UpdateAllowanceRequest)(nil),           // 4: odachin.allowance.UpdateAllowanceRequest
	(*Allowance)(nil),                        // 5: odachin.allowance.Allowance
	(*GetAllowanceByFromUserIdResponse)(nil), // 6: odachin.allowance.GetAllowanceByFromUserIdResponse
	(*emptypb.Empty)(nil),                    // 7: google.protobuf.Empty
}
var file_v1_odachin_allowance_proto_depIdxs = []int32{
	1,  // 0: odachin.allowance.RegisterAllowanceRequest.interval_type:type_name -> odachin.allowance.Alloance.Type
	0,  // 1: odachin.allowance.RegisterAllowanceRequest.day_of_week:type_name -> odachin.allowance.DayOfWeek
	1,  // 2: odachin.allowance.UpdateAllowanceRequest.interval_type:type_name -> odachin.allowance.Alloance.Type
	0,  // 3: odachin.allowance.UpdateAllowanceRequest.day_of_week:type_name -> odachin.allowance.DayOfWeek
	1,  // 4: odachin.allowance.Allowance.interval_type:type_name -> odachin.allowance.Alloance.Type
	0,  // 5: odachin.allowance.Allowance.day_of_week:type_name -> odachin.allowance.DayOfWeek
	5,  // 6: odachin.allowance.GetAllowanceByFromUserIdResponse.allowances:type_name -> odachin.allowance.Allowance
	3,  // 7: odachin.allowance.AllowanceService.RegisterAllowance:input_type -> odachin.allowance.RegisterAllowanceRequest
	4,  // 8: odachin.allowance.AllowanceService.UpdateAllowance:input_type -> odachin.allowance.UpdateAllowanceRequest
	7,  // 9: odachin.allowance.AllowanceService.GetAllowanceByFromUserId:input_type -> google.protobuf.Empty
	7,  // 10: odachin.allowance.AllowanceService.RegisterAllowance:output_type -> google.protobuf.Empty
	7,  // 11: odachin.allowance.AllowanceService.UpdateAllowance:output_type -> google.protobuf.Empty
	6,  // 12: odachin.allowance.AllowanceService.GetAllowanceByFromUserId:output_type -> odachin.allowance.GetAllowanceByFromUserIdResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_v1_odachin_allowance_proto_init() }
func file_v1_odachin_allowance_proto_init() {
	if File_v1_odachin_allowance_proto != nil {
		return
	}
	file_v1_odachin_allowance_proto_msgTypes[1].OneofWrappers = []any{}
	file_v1_odachin_allowance_proto_msgTypes[2].OneofWrappers = []any{}
	file_v1_odachin_allowance_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_odachin_allowance_proto_rawDesc), len(file_v1_odachin_allowance_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_odachin_allowance_proto_goTypes,
		DependencyIndexes: file_v1_odachin_allowance_proto_depIdxs,
		EnumInfos:         file_v1_odachin_allowance_proto_enumTypes,
		MessageInfos:      file_v1_odachin_allowance_proto_msgTypes,
	}.Build()
	File_v1_odachin_allowance_proto = out.File
	file_v1_odachin_allowance_proto_goTypes = nil
	file_v1_odachin_allowance_proto_depIdxs = nil
}
