// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/odachin/allowance.proto

package odachin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AllowanceService_RegisterAllowance_FullMethodName = "/odachin.allowance.AllowanceService/RegisterAllowance"
	AllowanceService_UpdateAllowance_FullMethodName   = "/odachin.allowance.AllowanceService/UpdateAllowance"
)

// AllowanceServiceClient is the client API for AllowanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllowanceServiceClient interface {
	RegisterAllowance(ctx context.Context, in *RegisterAllowanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAllowance(ctx context.Context, in *UpdateAllowanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type allowanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAllowanceServiceClient(cc grpc.ClientConnInterface) AllowanceServiceClient {
	return &allowanceServiceClient{cc}
}

func (c *allowanceServiceClient) RegisterAllowance(ctx context.Context, in *RegisterAllowanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AllowanceService_RegisterAllowance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allowanceServiceClient) UpdateAllowance(ctx context.Context, in *UpdateAllowanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AllowanceService_UpdateAllowance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllowanceServiceServer is the server API for AllowanceService service.
// All implementations must embed UnimplementedAllowanceServiceServer
// for forward compatibility
type AllowanceServiceServer interface {
	RegisterAllowance(context.Context, *RegisterAllowanceRequest) (*emptypb.Empty, error)
	UpdateAllowance(context.Context, *UpdateAllowanceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAllowanceServiceServer()
}

// UnimplementedAllowanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAllowanceServiceServer struct {
}

func (UnimplementedAllowanceServiceServer) RegisterAllowance(context.Context, *RegisterAllowanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAllowance not implemented")
}
func (UnimplementedAllowanceServiceServer) UpdateAllowance(context.Context, *UpdateAllowanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllowance not implemented")
}
func (UnimplementedAllowanceServiceServer) mustEmbedUnimplementedAllowanceServiceServer() {}

// UnsafeAllowanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllowanceServiceServer will
// result in compilation errors.
type UnsafeAllowanceServiceServer interface {
	mustEmbedUnimplementedAllowanceServiceServer()
}

func RegisterAllowanceServiceServer(s grpc.ServiceRegistrar, srv AllowanceServiceServer) {
	s.RegisterService(&AllowanceService_ServiceDesc, srv)
}

func _AllowanceService_RegisterAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowanceServiceServer).RegisterAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AllowanceService_RegisterAllowance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowanceServiceServer).RegisterAllowance(ctx, req.(*RegisterAllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllowanceService_UpdateAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowanceServiceServer).UpdateAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AllowanceService_UpdateAllowance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowanceServiceServer).UpdateAllowance(ctx, req.(*UpdateAllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AllowanceService_ServiceDesc is the grpc.ServiceDesc for AllowanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AllowanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odachin.allowance.AllowanceService",
	HandlerType: (*AllowanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAllowance",
			Handler:    _AllowanceService_RegisterAllowance_Handler,
		},
		{
			MethodName: "UpdateAllowance",
			Handler:    _AllowanceService_UpdateAllowance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/odachin/allowance.proto",
}
