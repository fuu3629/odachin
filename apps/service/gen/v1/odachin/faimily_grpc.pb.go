// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/odachin/faimily.proto

package odachin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FamilyService_CreateGroup_FullMethodName      = "/odachin.family.FamilyService/CreateGroup"
	FamilyService_InviteUser_FullMethodName       = "/odachin.family.FamilyService/InviteUser"
	FamilyService_AcceptInvitation_FullMethodName = "/odachin.family.FamilyService/AcceptInvitation"
)

// FamilyServiceClient is the client API for FamilyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FamilyServiceClient interface {
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type familyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFamilyServiceClient(cc grpc.ClientConnInterface) FamilyServiceClient {
	return &familyServiceClient{cc}
}

func (c *familyServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FamilyService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyServiceClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FamilyService_InviteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyServiceClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FamilyService_AcceptInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FamilyServiceServer is the server API for FamilyService service.
// All implementations must embed UnimplementedFamilyServiceServer
// for forward compatibility
type FamilyServiceServer interface {
	CreateGroup(context.Context, *CreateGroupRequest) (*emptypb.Empty, error)
	InviteUser(context.Context, *InviteUserRequest) (*emptypb.Empty, error)
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFamilyServiceServer()
}

// UnimplementedFamilyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFamilyServiceServer struct {
}

func (UnimplementedFamilyServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedFamilyServiceServer) InviteUser(context.Context, *InviteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (UnimplementedFamilyServiceServer) AcceptInvitation(context.Context, *AcceptInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedFamilyServiceServer) mustEmbedUnimplementedFamilyServiceServer() {}

// UnsafeFamilyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FamilyServiceServer will
// result in compilation errors.
type UnsafeFamilyServiceServer interface {
	mustEmbedUnimplementedFamilyServiceServer()
}

func RegisterFamilyServiceServer(s grpc.ServiceRegistrar, srv FamilyServiceServer) {
	s.RegisterService(&FamilyService_ServiceDesc, srv)
}

func _FamilyService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FamilyService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilyService_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyServiceServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FamilyService_InviteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyServiceServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilyService_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyServiceServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FamilyService_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyServiceServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FamilyService_ServiceDesc is the grpc.ServiceDesc for FamilyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FamilyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odachin.family.FamilyService",
	HandlerType: (*FamilyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _FamilyService_CreateGroup_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _FamilyService_InviteUser_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _FamilyService_AcceptInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/odachin/faimily.proto",
}
