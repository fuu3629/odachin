// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/odachin/faimily.proto

package odachinconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	odachin "github.com/fuu3629/odachin/apps/service/gen/v1/odachin"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FamilyServiceName is the fully-qualified name of the FamilyService service.
	FamilyServiceName = "odachin.family.FamilyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FamilyServiceCreateGroupProcedure is the fully-qualified name of the FamilyService's CreateGroup
	// RPC.
	FamilyServiceCreateGroupProcedure = "/odachin.family.FamilyService/CreateGroup"
	// FamilyServiceGetFamilyInfoProcedure is the fully-qualified name of the FamilyService's
	// GetFamilyInfo RPC.
	FamilyServiceGetFamilyInfoProcedure = "/odachin.family.FamilyService/GetFamilyInfo"
	// FamilyServiceInviteUserProcedure is the fully-qualified name of the FamilyService's InviteUser
	// RPC.
	FamilyServiceInviteUserProcedure = "/odachin.family.FamilyService/InviteUser"
	// FamilyServiceAcceptInvitationProcedure is the fully-qualified name of the FamilyService's
	// AcceptInvitation RPC.
	FamilyServiceAcceptInvitationProcedure = "/odachin.family.FamilyService/AcceptInvitation"
	// FamilyServiceGetInvitationListProcedure is the fully-qualified name of the FamilyService's
	// GetInvitationList RPC.
	FamilyServiceGetInvitationListProcedure = "/odachin.family.FamilyService/GetInvitationList"
)

// FamilyServiceClient is a client for the odachin.family.FamilyService service.
type FamilyServiceClient interface {
	CreateGroup(context.Context, *connect.Request[odachin.CreateGroupRequest]) (*connect.Response[emptypb.Empty], error)
	GetFamilyInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetFamilyInfoResponse], error)
	InviteUser(context.Context, *connect.Request[odachin.InviteUserRequest]) (*connect.Response[emptypb.Empty], error)
	AcceptInvitation(context.Context, *connect.Request[odachin.AcceptInvitationRequest]) (*connect.Response[emptypb.Empty], error)
	GetInvitationList(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetInvitationListResponse], error)
}

// NewFamilyServiceClient constructs a client for the odachin.family.FamilyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFamilyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FamilyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	familyServiceMethods := odachin.File_v1_odachin_faimily_proto.Services().ByName("FamilyService").Methods()
	return &familyServiceClient{
		createGroup: connect.NewClient[odachin.CreateGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+FamilyServiceCreateGroupProcedure,
			connect.WithSchema(familyServiceMethods.ByName("CreateGroup")),
			connect.WithClientOptions(opts...),
		),
		getFamilyInfo: connect.NewClient[emptypb.Empty, odachin.GetFamilyInfoResponse](
			httpClient,
			baseURL+FamilyServiceGetFamilyInfoProcedure,
			connect.WithSchema(familyServiceMethods.ByName("GetFamilyInfo")),
			connect.WithClientOptions(opts...),
		),
		inviteUser: connect.NewClient[odachin.InviteUserRequest, emptypb.Empty](
			httpClient,
			baseURL+FamilyServiceInviteUserProcedure,
			connect.WithSchema(familyServiceMethods.ByName("InviteUser")),
			connect.WithClientOptions(opts...),
		),
		acceptInvitation: connect.NewClient[odachin.AcceptInvitationRequest, emptypb.Empty](
			httpClient,
			baseURL+FamilyServiceAcceptInvitationProcedure,
			connect.WithSchema(familyServiceMethods.ByName("AcceptInvitation")),
			connect.WithClientOptions(opts...),
		),
		getInvitationList: connect.NewClient[emptypb.Empty, odachin.GetInvitationListResponse](
			httpClient,
			baseURL+FamilyServiceGetInvitationListProcedure,
			connect.WithSchema(familyServiceMethods.ByName("GetInvitationList")),
			connect.WithClientOptions(opts...),
		),
	}
}

// familyServiceClient implements FamilyServiceClient.
type familyServiceClient struct {
	createGroup       *connect.Client[odachin.CreateGroupRequest, emptypb.Empty]
	getFamilyInfo     *connect.Client[emptypb.Empty, odachin.GetFamilyInfoResponse]
	inviteUser        *connect.Client[odachin.InviteUserRequest, emptypb.Empty]
	acceptInvitation  *connect.Client[odachin.AcceptInvitationRequest, emptypb.Empty]
	getInvitationList *connect.Client[emptypb.Empty, odachin.GetInvitationListResponse]
}

// CreateGroup calls odachin.family.FamilyService.CreateGroup.
func (c *familyServiceClient) CreateGroup(ctx context.Context, req *connect.Request[odachin.CreateGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// GetFamilyInfo calls odachin.family.FamilyService.GetFamilyInfo.
func (c *familyServiceClient) GetFamilyInfo(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetFamilyInfoResponse], error) {
	return c.getFamilyInfo.CallUnary(ctx, req)
}

// InviteUser calls odachin.family.FamilyService.InviteUser.
func (c *familyServiceClient) InviteUser(ctx context.Context, req *connect.Request[odachin.InviteUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.inviteUser.CallUnary(ctx, req)
}

// AcceptInvitation calls odachin.family.FamilyService.AcceptInvitation.
func (c *familyServiceClient) AcceptInvitation(ctx context.Context, req *connect.Request[odachin.AcceptInvitationRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.acceptInvitation.CallUnary(ctx, req)
}

// GetInvitationList calls odachin.family.FamilyService.GetInvitationList.
func (c *familyServiceClient) GetInvitationList(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetInvitationListResponse], error) {
	return c.getInvitationList.CallUnary(ctx, req)
}

// FamilyServiceHandler is an implementation of the odachin.family.FamilyService service.
type FamilyServiceHandler interface {
	CreateGroup(context.Context, *connect.Request[odachin.CreateGroupRequest]) (*connect.Response[emptypb.Empty], error)
	GetFamilyInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetFamilyInfoResponse], error)
	InviteUser(context.Context, *connect.Request[odachin.InviteUserRequest]) (*connect.Response[emptypb.Empty], error)
	AcceptInvitation(context.Context, *connect.Request[odachin.AcceptInvitationRequest]) (*connect.Response[emptypb.Empty], error)
	GetInvitationList(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetInvitationListResponse], error)
}

// NewFamilyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFamilyServiceHandler(svc FamilyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	familyServiceMethods := odachin.File_v1_odachin_faimily_proto.Services().ByName("FamilyService").Methods()
	familyServiceCreateGroupHandler := connect.NewUnaryHandler(
		FamilyServiceCreateGroupProcedure,
		svc.CreateGroup,
		connect.WithSchema(familyServiceMethods.ByName("CreateGroup")),
		connect.WithHandlerOptions(opts...),
	)
	familyServiceGetFamilyInfoHandler := connect.NewUnaryHandler(
		FamilyServiceGetFamilyInfoProcedure,
		svc.GetFamilyInfo,
		connect.WithSchema(familyServiceMethods.ByName("GetFamilyInfo")),
		connect.WithHandlerOptions(opts...),
	)
	familyServiceInviteUserHandler := connect.NewUnaryHandler(
		FamilyServiceInviteUserProcedure,
		svc.InviteUser,
		connect.WithSchema(familyServiceMethods.ByName("InviteUser")),
		connect.WithHandlerOptions(opts...),
	)
	familyServiceAcceptInvitationHandler := connect.NewUnaryHandler(
		FamilyServiceAcceptInvitationProcedure,
		svc.AcceptInvitation,
		connect.WithSchema(familyServiceMethods.ByName("AcceptInvitation")),
		connect.WithHandlerOptions(opts...),
	)
	familyServiceGetInvitationListHandler := connect.NewUnaryHandler(
		FamilyServiceGetInvitationListProcedure,
		svc.GetInvitationList,
		connect.WithSchema(familyServiceMethods.ByName("GetInvitationList")),
		connect.WithHandlerOptions(opts...),
	)
	return "/odachin.family.FamilyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FamilyServiceCreateGroupProcedure:
			familyServiceCreateGroupHandler.ServeHTTP(w, r)
		case FamilyServiceGetFamilyInfoProcedure:
			familyServiceGetFamilyInfoHandler.ServeHTTP(w, r)
		case FamilyServiceInviteUserProcedure:
			familyServiceInviteUserHandler.ServeHTTP(w, r)
		case FamilyServiceAcceptInvitationProcedure:
			familyServiceAcceptInvitationHandler.ServeHTTP(w, r)
		case FamilyServiceGetInvitationListProcedure:
			familyServiceGetInvitationListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFamilyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFamilyServiceHandler struct{}

func (UnimplementedFamilyServiceHandler) CreateGroup(context.Context, *connect.Request[odachin.CreateGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.family.FamilyService.CreateGroup is not implemented"))
}

func (UnimplementedFamilyServiceHandler) GetFamilyInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetFamilyInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.family.FamilyService.GetFamilyInfo is not implemented"))
}

func (UnimplementedFamilyServiceHandler) InviteUser(context.Context, *connect.Request[odachin.InviteUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.family.FamilyService.InviteUser is not implemented"))
}

func (UnimplementedFamilyServiceHandler) AcceptInvitation(context.Context, *connect.Request[odachin.AcceptInvitationRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.family.FamilyService.AcceptInvitation is not implemented"))
}

func (UnimplementedFamilyServiceHandler) GetInvitationList(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetInvitationListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.family.FamilyService.GetInvitationList is not implemented"))
}
