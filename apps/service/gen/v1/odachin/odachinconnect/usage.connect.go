// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/odachin/usage.proto

package odachinconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	odachin "github.com/fuu3629/odachin/apps/service/gen/v1/odachin"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UsageServiceName is the fully-qualified name of the UsageService service.
	UsageServiceName = "odachin.reward.UsageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UsageServiceApplicateUsageProcedure is the fully-qualified name of the UsageService's
	// ApplicateUsage RPC.
	UsageServiceApplicateUsageProcedure = "/odachin.reward.UsageService/ApplicateUsage"
)

// UsageServiceClient is a client for the odachin.reward.UsageService service.
type UsageServiceClient interface {
	ApplicateUsage(context.Context, *connect.Request[odachin.ApplicateUsageRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewUsageServiceClient constructs a client for the odachin.reward.UsageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUsageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UsageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	usageServiceMethods := odachin.File_v1_odachin_usage_proto.Services().ByName("UsageService").Methods()
	return &usageServiceClient{
		applicateUsage: connect.NewClient[odachin.ApplicateUsageRequest, emptypb.Empty](
			httpClient,
			baseURL+UsageServiceApplicateUsageProcedure,
			connect.WithSchema(usageServiceMethods.ByName("ApplicateUsage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// usageServiceClient implements UsageServiceClient.
type usageServiceClient struct {
	applicateUsage *connect.Client[odachin.ApplicateUsageRequest, emptypb.Empty]
}

// ApplicateUsage calls odachin.reward.UsageService.ApplicateUsage.
func (c *usageServiceClient) ApplicateUsage(ctx context.Context, req *connect.Request[odachin.ApplicateUsageRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.applicateUsage.CallUnary(ctx, req)
}

// UsageServiceHandler is an implementation of the odachin.reward.UsageService service.
type UsageServiceHandler interface {
	ApplicateUsage(context.Context, *connect.Request[odachin.ApplicateUsageRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewUsageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUsageServiceHandler(svc UsageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	usageServiceMethods := odachin.File_v1_odachin_usage_proto.Services().ByName("UsageService").Methods()
	usageServiceApplicateUsageHandler := connect.NewUnaryHandler(
		UsageServiceApplicateUsageProcedure,
		svc.ApplicateUsage,
		connect.WithSchema(usageServiceMethods.ByName("ApplicateUsage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/odachin.reward.UsageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UsageServiceApplicateUsageProcedure:
			usageServiceApplicateUsageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUsageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUsageServiceHandler struct{}

func (UnimplementedUsageServiceHandler) ApplicateUsage(context.Context, *connect.Request[odachin.ApplicateUsageRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.reward.UsageService.ApplicateUsage is not implemented"))
}
