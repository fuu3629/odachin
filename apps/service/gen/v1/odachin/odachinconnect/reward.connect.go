// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/odachin/reward.proto

package odachinconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	odachin "github.com/fuu3629/odachin/apps/service/gen/v1/odachin"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RewardServiceName is the fully-qualified name of the RewardService service.
	RewardServiceName = "odachin.reward.RewardService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RewardServiceRegisterRewardProcedure is the fully-qualified name of the RewardService's
	// RegisterReward RPC.
	RewardServiceRegisterRewardProcedure = "/odachin.reward.RewardService/RegisterReward"
	// RewardServiceDeleteRewardProcedure is the fully-qualified name of the RewardService's
	// DeleteReward RPC.
	RewardServiceDeleteRewardProcedure = "/odachin.reward.RewardService/DeleteReward"
	// RewardServiceGetRewardListProcedure is the fully-qualified name of the RewardService's
	// GetRewardList RPC.
	RewardServiceGetRewardListProcedure = "/odachin.reward.RewardService/GetRewardList"
	// RewardServiceGetChildRewardListProcedure is the fully-qualified name of the RewardService's
	// GetChildRewardList RPC.
	RewardServiceGetChildRewardListProcedure = "/odachin.reward.RewardService/GetChildRewardList"
	// RewardServiceGetUncompletedRewardCountProcedure is the fully-qualified name of the
	// RewardService's GetUncompletedRewardCount RPC.
	RewardServiceGetUncompletedRewardCountProcedure = "/odachin.reward.RewardService/GetUncompletedRewardCount"
	// RewardServiceReportRewardProcedure is the fully-qualified name of the RewardService's
	// ReportReward RPC.
	RewardServiceReportRewardProcedure = "/odachin.reward.RewardService/ReportReward"
)

// RewardServiceClient is a client for the odachin.reward.RewardService service.
type RewardServiceClient interface {
	RegisterReward(context.Context, *connect.Request[odachin.RegisterRewardRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteReward(context.Context, *connect.Request[odachin.DeleteRewardRequest]) (*connect.Response[emptypb.Empty], error)
	GetRewardList(context.Context, *connect.Request[odachin.GetRewardListRequest]) (*connect.Response[odachin.GetRewardListResponse], error)
	GetChildRewardList(context.Context, *connect.Request[odachin.GetChildRewardListRequest]) (*connect.Response[odachin.GetChildRewardListResponse], error)
	GetUncompletedRewardCount(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetUncompletedRewardCountResponse], error)
	ReportReward(context.Context, *connect.Request[odachin.ReportRewardRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewRewardServiceClient constructs a client for the odachin.reward.RewardService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRewardServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RewardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	rewardServiceMethods := odachin.File_v1_odachin_reward_proto.Services().ByName("RewardService").Methods()
	return &rewardServiceClient{
		registerReward: connect.NewClient[odachin.RegisterRewardRequest, emptypb.Empty](
			httpClient,
			baseURL+RewardServiceRegisterRewardProcedure,
			connect.WithSchema(rewardServiceMethods.ByName("RegisterReward")),
			connect.WithClientOptions(opts...),
		),
		deleteReward: connect.NewClient[odachin.DeleteRewardRequest, emptypb.Empty](
			httpClient,
			baseURL+RewardServiceDeleteRewardProcedure,
			connect.WithSchema(rewardServiceMethods.ByName("DeleteReward")),
			connect.WithClientOptions(opts...),
		),
		getRewardList: connect.NewClient[odachin.GetRewardListRequest, odachin.GetRewardListResponse](
			httpClient,
			baseURL+RewardServiceGetRewardListProcedure,
			connect.WithSchema(rewardServiceMethods.ByName("GetRewardList")),
			connect.WithClientOptions(opts...),
		),
		getChildRewardList: connect.NewClient[odachin.GetChildRewardListRequest, odachin.GetChildRewardListResponse](
			httpClient,
			baseURL+RewardServiceGetChildRewardListProcedure,
			connect.WithSchema(rewardServiceMethods.ByName("GetChildRewardList")),
			connect.WithClientOptions(opts...),
		),
		getUncompletedRewardCount: connect.NewClient[emptypb.Empty, odachin.GetUncompletedRewardCountResponse](
			httpClient,
			baseURL+RewardServiceGetUncompletedRewardCountProcedure,
			connect.WithSchema(rewardServiceMethods.ByName("GetUncompletedRewardCount")),
			connect.WithClientOptions(opts...),
		),
		reportReward: connect.NewClient[odachin.ReportRewardRequest, emptypb.Empty](
			httpClient,
			baseURL+RewardServiceReportRewardProcedure,
			connect.WithSchema(rewardServiceMethods.ByName("ReportReward")),
			connect.WithClientOptions(opts...),
		),
	}
}

// rewardServiceClient implements RewardServiceClient.
type rewardServiceClient struct {
	registerReward            *connect.Client[odachin.RegisterRewardRequest, emptypb.Empty]
	deleteReward              *connect.Client[odachin.DeleteRewardRequest, emptypb.Empty]
	getRewardList             *connect.Client[odachin.GetRewardListRequest, odachin.GetRewardListResponse]
	getChildRewardList        *connect.Client[odachin.GetChildRewardListRequest, odachin.GetChildRewardListResponse]
	getUncompletedRewardCount *connect.Client[emptypb.Empty, odachin.GetUncompletedRewardCountResponse]
	reportReward              *connect.Client[odachin.ReportRewardRequest, emptypb.Empty]
}

// RegisterReward calls odachin.reward.RewardService.RegisterReward.
func (c *rewardServiceClient) RegisterReward(ctx context.Context, req *connect.Request[odachin.RegisterRewardRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.registerReward.CallUnary(ctx, req)
}

// DeleteReward calls odachin.reward.RewardService.DeleteReward.
func (c *rewardServiceClient) DeleteReward(ctx context.Context, req *connect.Request[odachin.DeleteRewardRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteReward.CallUnary(ctx, req)
}

// GetRewardList calls odachin.reward.RewardService.GetRewardList.
func (c *rewardServiceClient) GetRewardList(ctx context.Context, req *connect.Request[odachin.GetRewardListRequest]) (*connect.Response[odachin.GetRewardListResponse], error) {
	return c.getRewardList.CallUnary(ctx, req)
}

// GetChildRewardList calls odachin.reward.RewardService.GetChildRewardList.
func (c *rewardServiceClient) GetChildRewardList(ctx context.Context, req *connect.Request[odachin.GetChildRewardListRequest]) (*connect.Response[odachin.GetChildRewardListResponse], error) {
	return c.getChildRewardList.CallUnary(ctx, req)
}

// GetUncompletedRewardCount calls odachin.reward.RewardService.GetUncompletedRewardCount.
func (c *rewardServiceClient) GetUncompletedRewardCount(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetUncompletedRewardCountResponse], error) {
	return c.getUncompletedRewardCount.CallUnary(ctx, req)
}

// ReportReward calls odachin.reward.RewardService.ReportReward.
func (c *rewardServiceClient) ReportReward(ctx context.Context, req *connect.Request[odachin.ReportRewardRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.reportReward.CallUnary(ctx, req)
}

// RewardServiceHandler is an implementation of the odachin.reward.RewardService service.
type RewardServiceHandler interface {
	RegisterReward(context.Context, *connect.Request[odachin.RegisterRewardRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteReward(context.Context, *connect.Request[odachin.DeleteRewardRequest]) (*connect.Response[emptypb.Empty], error)
	GetRewardList(context.Context, *connect.Request[odachin.GetRewardListRequest]) (*connect.Response[odachin.GetRewardListResponse], error)
	GetChildRewardList(context.Context, *connect.Request[odachin.GetChildRewardListRequest]) (*connect.Response[odachin.GetChildRewardListResponse], error)
	GetUncompletedRewardCount(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetUncompletedRewardCountResponse], error)
	ReportReward(context.Context, *connect.Request[odachin.ReportRewardRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewRewardServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRewardServiceHandler(svc RewardServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	rewardServiceMethods := odachin.File_v1_odachin_reward_proto.Services().ByName("RewardService").Methods()
	rewardServiceRegisterRewardHandler := connect.NewUnaryHandler(
		RewardServiceRegisterRewardProcedure,
		svc.RegisterReward,
		connect.WithSchema(rewardServiceMethods.ByName("RegisterReward")),
		connect.WithHandlerOptions(opts...),
	)
	rewardServiceDeleteRewardHandler := connect.NewUnaryHandler(
		RewardServiceDeleteRewardProcedure,
		svc.DeleteReward,
		connect.WithSchema(rewardServiceMethods.ByName("DeleteReward")),
		connect.WithHandlerOptions(opts...),
	)
	rewardServiceGetRewardListHandler := connect.NewUnaryHandler(
		RewardServiceGetRewardListProcedure,
		svc.GetRewardList,
		connect.WithSchema(rewardServiceMethods.ByName("GetRewardList")),
		connect.WithHandlerOptions(opts...),
	)
	rewardServiceGetChildRewardListHandler := connect.NewUnaryHandler(
		RewardServiceGetChildRewardListProcedure,
		svc.GetChildRewardList,
		connect.WithSchema(rewardServiceMethods.ByName("GetChildRewardList")),
		connect.WithHandlerOptions(opts...),
	)
	rewardServiceGetUncompletedRewardCountHandler := connect.NewUnaryHandler(
		RewardServiceGetUncompletedRewardCountProcedure,
		svc.GetUncompletedRewardCount,
		connect.WithSchema(rewardServiceMethods.ByName("GetUncompletedRewardCount")),
		connect.WithHandlerOptions(opts...),
	)
	rewardServiceReportRewardHandler := connect.NewUnaryHandler(
		RewardServiceReportRewardProcedure,
		svc.ReportReward,
		connect.WithSchema(rewardServiceMethods.ByName("ReportReward")),
		connect.WithHandlerOptions(opts...),
	)
	return "/odachin.reward.RewardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RewardServiceRegisterRewardProcedure:
			rewardServiceRegisterRewardHandler.ServeHTTP(w, r)
		case RewardServiceDeleteRewardProcedure:
			rewardServiceDeleteRewardHandler.ServeHTTP(w, r)
		case RewardServiceGetRewardListProcedure:
			rewardServiceGetRewardListHandler.ServeHTTP(w, r)
		case RewardServiceGetChildRewardListProcedure:
			rewardServiceGetChildRewardListHandler.ServeHTTP(w, r)
		case RewardServiceGetUncompletedRewardCountProcedure:
			rewardServiceGetUncompletedRewardCountHandler.ServeHTTP(w, r)
		case RewardServiceReportRewardProcedure:
			rewardServiceReportRewardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRewardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRewardServiceHandler struct{}

func (UnimplementedRewardServiceHandler) RegisterReward(context.Context, *connect.Request[odachin.RegisterRewardRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.reward.RewardService.RegisterReward is not implemented"))
}

func (UnimplementedRewardServiceHandler) DeleteReward(context.Context, *connect.Request[odachin.DeleteRewardRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.reward.RewardService.DeleteReward is not implemented"))
}

func (UnimplementedRewardServiceHandler) GetRewardList(context.Context, *connect.Request[odachin.GetRewardListRequest]) (*connect.Response[odachin.GetRewardListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.reward.RewardService.GetRewardList is not implemented"))
}

func (UnimplementedRewardServiceHandler) GetChildRewardList(context.Context, *connect.Request[odachin.GetChildRewardListRequest]) (*connect.Response[odachin.GetChildRewardListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.reward.RewardService.GetChildRewardList is not implemented"))
}

func (UnimplementedRewardServiceHandler) GetUncompletedRewardCount(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetUncompletedRewardCountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.reward.RewardService.GetUncompletedRewardCount is not implemented"))
}

func (UnimplementedRewardServiceHandler) ReportReward(context.Context, *connect.Request[odachin.ReportRewardRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.reward.RewardService.ReportReward is not implemented"))
}
