// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/odachin/auth.proto

package odachinconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	odachin "github.com/fuu3629/odachin/apps/service/gen/v1/odachin"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "odachin.auth.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceHealthCheckProcedure is the fully-qualified name of the AuthService's HealthCheck RPC.
	AuthServiceHealthCheckProcedure = "/odachin.auth.AuthService/HealthCheck"
	// AuthServiceCreateUserProcedure is the fully-qualified name of the AuthService's CreateUser RPC.
	AuthServiceCreateUserProcedure = "/odachin.auth.AuthService/CreateUser"
	// AuthServiceUpdateUserProcedure is the fully-qualified name of the AuthService's UpdateUser RPC.
	AuthServiceUpdateUserProcedure = "/odachin.auth.AuthService/UpdateUser"
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/odachin.auth.AuthService/Login"
	// AuthServiceGetUserInfoProcedure is the fully-qualified name of the AuthService's GetUserInfo RPC.
	AuthServiceGetUserInfoProcedure = "/odachin.auth.AuthService/GetUserInfo"
	// AuthServiceGetOwnInfoProcedure is the fully-qualified name of the AuthService's GetOwnInfo RPC.
	AuthServiceGetOwnInfoProcedure = "/odachin.auth.AuthService/GetOwnInfo"
)

// AuthServiceClient is a client for the odachin.auth.AuthService service.
type AuthServiceClient interface {
	HealthCheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	CreateUser(context.Context, *connect.Request[odachin.CreateUserRequest]) (*connect.Response[odachin.CreateUserResponse], error)
	UpdateUser(context.Context, *connect.Request[odachin.UpdateUserRequest]) (*connect.Response[emptypb.Empty], error)
	Login(context.Context, *connect.Request[odachin.LoginRequest]) (*connect.Response[odachin.LoginResponse], error)
	GetUserInfo(context.Context, *connect.Request[odachin.GetUserInfoRequest]) (*connect.Response[odachin.GetUserInfoResponse], error)
	GetOwnInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetOwnInfoResponse], error)
}

// NewAuthServiceClient constructs a client for the odachin.auth.AuthService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := odachin.File_v1_odachin_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		healthCheck: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+AuthServiceHealthCheckProcedure,
			connect.WithSchema(authServiceMethods.ByName("HealthCheck")),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[odachin.CreateUserRequest, odachin.CreateUserResponse](
			httpClient,
			baseURL+AuthServiceCreateUserProcedure,
			connect.WithSchema(authServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[odachin.UpdateUserRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthServiceUpdateUserProcedure,
			connect.WithSchema(authServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[odachin.LoginRequest, odachin.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		getUserInfo: connect.NewClient[odachin.GetUserInfoRequest, odachin.GetUserInfoResponse](
			httpClient,
			baseURL+AuthServiceGetUserInfoProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetUserInfo")),
			connect.WithClientOptions(opts...),
		),
		getOwnInfo: connect.NewClient[emptypb.Empty, odachin.GetOwnInfoResponse](
			httpClient,
			baseURL+AuthServiceGetOwnInfoProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetOwnInfo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	healthCheck *connect.Client[emptypb.Empty, emptypb.Empty]
	createUser  *connect.Client[odachin.CreateUserRequest, odachin.CreateUserResponse]
	updateUser  *connect.Client[odachin.UpdateUserRequest, emptypb.Empty]
	login       *connect.Client[odachin.LoginRequest, odachin.LoginResponse]
	getUserInfo *connect.Client[odachin.GetUserInfoRequest, odachin.GetUserInfoResponse]
	getOwnInfo  *connect.Client[emptypb.Empty, odachin.GetOwnInfoResponse]
}

// HealthCheck calls odachin.auth.AuthService.HealthCheck.
func (c *authServiceClient) HealthCheck(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// CreateUser calls odachin.auth.AuthService.CreateUser.
func (c *authServiceClient) CreateUser(ctx context.Context, req *connect.Request[odachin.CreateUserRequest]) (*connect.Response[odachin.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// UpdateUser calls odachin.auth.AuthService.UpdateUser.
func (c *authServiceClient) UpdateUser(ctx context.Context, req *connect.Request[odachin.UpdateUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// Login calls odachin.auth.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[odachin.LoginRequest]) (*connect.Response[odachin.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// GetUserInfo calls odachin.auth.AuthService.GetUserInfo.
func (c *authServiceClient) GetUserInfo(ctx context.Context, req *connect.Request[odachin.GetUserInfoRequest]) (*connect.Response[odachin.GetUserInfoResponse], error) {
	return c.getUserInfo.CallUnary(ctx, req)
}

// GetOwnInfo calls odachin.auth.AuthService.GetOwnInfo.
func (c *authServiceClient) GetOwnInfo(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetOwnInfoResponse], error) {
	return c.getOwnInfo.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the odachin.auth.AuthService service.
type AuthServiceHandler interface {
	HealthCheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	CreateUser(context.Context, *connect.Request[odachin.CreateUserRequest]) (*connect.Response[odachin.CreateUserResponse], error)
	UpdateUser(context.Context, *connect.Request[odachin.UpdateUserRequest]) (*connect.Response[emptypb.Empty], error)
	Login(context.Context, *connect.Request[odachin.LoginRequest]) (*connect.Response[odachin.LoginResponse], error)
	GetUserInfo(context.Context, *connect.Request[odachin.GetUserInfoRequest]) (*connect.Response[odachin.GetUserInfoResponse], error)
	GetOwnInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetOwnInfoResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := odachin.File_v1_odachin_auth_proto.Services().ByName("AuthService").Methods()
	authServiceHealthCheckHandler := connect.NewUnaryHandler(
		AuthServiceHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(authServiceMethods.ByName("HealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCreateUserHandler := connect.NewUnaryHandler(
		AuthServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(authServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUpdateUserHandler := connect.NewUnaryHandler(
		AuthServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(authServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetUserInfoHandler := connect.NewUnaryHandler(
		AuthServiceGetUserInfoProcedure,
		svc.GetUserInfo,
		connect.WithSchema(authServiceMethods.ByName("GetUserInfo")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetOwnInfoHandler := connect.NewUnaryHandler(
		AuthServiceGetOwnInfoProcedure,
		svc.GetOwnInfo,
		connect.WithSchema(authServiceMethods.ByName("GetOwnInfo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/odachin.auth.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceHealthCheckProcedure:
			authServiceHealthCheckHandler.ServeHTTP(w, r)
		case AuthServiceCreateUserProcedure:
			authServiceCreateUserHandler.ServeHTTP(w, r)
		case AuthServiceUpdateUserProcedure:
			authServiceUpdateUserHandler.ServeHTTP(w, r)
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceGetUserInfoProcedure:
			authServiceGetUserInfoHandler.ServeHTTP(w, r)
		case AuthServiceGetOwnInfoProcedure:
			authServiceGetOwnInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) HealthCheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.auth.AuthService.HealthCheck is not implemented"))
}

func (UnimplementedAuthServiceHandler) CreateUser(context.Context, *connect.Request[odachin.CreateUserRequest]) (*connect.Response[odachin.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.auth.AuthService.CreateUser is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateUser(context.Context, *connect.Request[odachin.UpdateUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.auth.AuthService.UpdateUser is not implemented"))
}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[odachin.LoginRequest]) (*connect.Response[odachin.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.auth.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetUserInfo(context.Context, *connect.Request[odachin.GetUserInfoRequest]) (*connect.Response[odachin.GetUserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.auth.AuthService.GetUserInfo is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetOwnInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetOwnInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.auth.AuthService.GetOwnInfo is not implemented"))
}
