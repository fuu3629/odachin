// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/odachin/allowance.proto

package odachinconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	odachin "github.com/fuu3629/odachin/apps/service/gen/v1/odachin"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AllowanceServiceName is the fully-qualified name of the AllowanceService service.
	AllowanceServiceName = "odachin.allowance.AllowanceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AllowanceServiceRegisterAllowanceProcedure is the fully-qualified name of the AllowanceService's
	// RegisterAllowance RPC.
	AllowanceServiceRegisterAllowanceProcedure = "/odachin.allowance.AllowanceService/RegisterAllowance"
	// AllowanceServiceUpdateAllowanceProcedure is the fully-qualified name of the AllowanceService's
	// UpdateAllowance RPC.
	AllowanceServiceUpdateAllowanceProcedure = "/odachin.allowance.AllowanceService/UpdateAllowance"
	// AllowanceServiceGetAllowanceByFromUserIdProcedure is the fully-qualified name of the
	// AllowanceService's GetAllowanceByFromUserId RPC.
	AllowanceServiceGetAllowanceByFromUserIdProcedure = "/odachin.allowance.AllowanceService/GetAllowanceByFromUserId"
	// AllowanceServiceAllowanceProcedure is the fully-qualified name of the AllowanceService's
	// Allowance RPC.
	AllowanceServiceAllowanceProcedure = "/odachin.allowance.AllowanceService/Allowance"
)

// AllowanceServiceClient is a client for the odachin.allowance.AllowanceService service.
type AllowanceServiceClient interface {
	RegisterAllowance(context.Context, *connect.Request[odachin.RegisterAllowanceRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateAllowance(context.Context, *connect.Request[odachin.UpdateAllowanceRequest]) (*connect.Response[emptypb.Empty], error)
	GetAllowanceByFromUserId(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetAllowanceByFromUserIdResponse], error)
	Allowance(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
}

// NewAllowanceServiceClient constructs a client for the odachin.allowance.AllowanceService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAllowanceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AllowanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	allowanceServiceMethods := odachin.File_v1_odachin_allowance_proto.Services().ByName("AllowanceService").Methods()
	return &allowanceServiceClient{
		registerAllowance: connect.NewClient[odachin.RegisterAllowanceRequest, emptypb.Empty](
			httpClient,
			baseURL+AllowanceServiceRegisterAllowanceProcedure,
			connect.WithSchema(allowanceServiceMethods.ByName("RegisterAllowance")),
			connect.WithClientOptions(opts...),
		),
		updateAllowance: connect.NewClient[odachin.UpdateAllowanceRequest, emptypb.Empty](
			httpClient,
			baseURL+AllowanceServiceUpdateAllowanceProcedure,
			connect.WithSchema(allowanceServiceMethods.ByName("UpdateAllowance")),
			connect.WithClientOptions(opts...),
		),
		getAllowanceByFromUserId: connect.NewClient[emptypb.Empty, odachin.GetAllowanceByFromUserIdResponse](
			httpClient,
			baseURL+AllowanceServiceGetAllowanceByFromUserIdProcedure,
			connect.WithSchema(allowanceServiceMethods.ByName("GetAllowanceByFromUserId")),
			connect.WithClientOptions(opts...),
		),
		allowance: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+AllowanceServiceAllowanceProcedure,
			connect.WithSchema(allowanceServiceMethods.ByName("Allowance")),
			connect.WithClientOptions(opts...),
		),
	}
}

// allowanceServiceClient implements AllowanceServiceClient.
type allowanceServiceClient struct {
	registerAllowance        *connect.Client[odachin.RegisterAllowanceRequest, emptypb.Empty]
	updateAllowance          *connect.Client[odachin.UpdateAllowanceRequest, emptypb.Empty]
	getAllowanceByFromUserId *connect.Client[emptypb.Empty, odachin.GetAllowanceByFromUserIdResponse]
	allowance                *connect.Client[emptypb.Empty, emptypb.Empty]
}

// RegisterAllowance calls odachin.allowance.AllowanceService.RegisterAllowance.
func (c *allowanceServiceClient) RegisterAllowance(ctx context.Context, req *connect.Request[odachin.RegisterAllowanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.registerAllowance.CallUnary(ctx, req)
}

// UpdateAllowance calls odachin.allowance.AllowanceService.UpdateAllowance.
func (c *allowanceServiceClient) UpdateAllowance(ctx context.Context, req *connect.Request[odachin.UpdateAllowanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateAllowance.CallUnary(ctx, req)
}

// GetAllowanceByFromUserId calls odachin.allowance.AllowanceService.GetAllowanceByFromUserId.
func (c *allowanceServiceClient) GetAllowanceByFromUserId(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetAllowanceByFromUserIdResponse], error) {
	return c.getAllowanceByFromUserId.CallUnary(ctx, req)
}

// Allowance calls odachin.allowance.AllowanceService.Allowance.
func (c *allowanceServiceClient) Allowance(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.allowance.CallUnary(ctx, req)
}

// AllowanceServiceHandler is an implementation of the odachin.allowance.AllowanceService service.
type AllowanceServiceHandler interface {
	RegisterAllowance(context.Context, *connect.Request[odachin.RegisterAllowanceRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateAllowance(context.Context, *connect.Request[odachin.UpdateAllowanceRequest]) (*connect.Response[emptypb.Empty], error)
	GetAllowanceByFromUserId(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetAllowanceByFromUserIdResponse], error)
	Allowance(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
}

// NewAllowanceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAllowanceServiceHandler(svc AllowanceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	allowanceServiceMethods := odachin.File_v1_odachin_allowance_proto.Services().ByName("AllowanceService").Methods()
	allowanceServiceRegisterAllowanceHandler := connect.NewUnaryHandler(
		AllowanceServiceRegisterAllowanceProcedure,
		svc.RegisterAllowance,
		connect.WithSchema(allowanceServiceMethods.ByName("RegisterAllowance")),
		connect.WithHandlerOptions(opts...),
	)
	allowanceServiceUpdateAllowanceHandler := connect.NewUnaryHandler(
		AllowanceServiceUpdateAllowanceProcedure,
		svc.UpdateAllowance,
		connect.WithSchema(allowanceServiceMethods.ByName("UpdateAllowance")),
		connect.WithHandlerOptions(opts...),
	)
	allowanceServiceGetAllowanceByFromUserIdHandler := connect.NewUnaryHandler(
		AllowanceServiceGetAllowanceByFromUserIdProcedure,
		svc.GetAllowanceByFromUserId,
		connect.WithSchema(allowanceServiceMethods.ByName("GetAllowanceByFromUserId")),
		connect.WithHandlerOptions(opts...),
	)
	allowanceServiceAllowanceHandler := connect.NewUnaryHandler(
		AllowanceServiceAllowanceProcedure,
		svc.Allowance,
		connect.WithSchema(allowanceServiceMethods.ByName("Allowance")),
		connect.WithHandlerOptions(opts...),
	)
	return "/odachin.allowance.AllowanceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AllowanceServiceRegisterAllowanceProcedure:
			allowanceServiceRegisterAllowanceHandler.ServeHTTP(w, r)
		case AllowanceServiceUpdateAllowanceProcedure:
			allowanceServiceUpdateAllowanceHandler.ServeHTTP(w, r)
		case AllowanceServiceGetAllowanceByFromUserIdProcedure:
			allowanceServiceGetAllowanceByFromUserIdHandler.ServeHTTP(w, r)
		case AllowanceServiceAllowanceProcedure:
			allowanceServiceAllowanceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAllowanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAllowanceServiceHandler struct{}

func (UnimplementedAllowanceServiceHandler) RegisterAllowance(context.Context, *connect.Request[odachin.RegisterAllowanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.allowance.AllowanceService.RegisterAllowance is not implemented"))
}

func (UnimplementedAllowanceServiceHandler) UpdateAllowance(context.Context, *connect.Request[odachin.UpdateAllowanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.allowance.AllowanceService.UpdateAllowance is not implemented"))
}

func (UnimplementedAllowanceServiceHandler) GetAllowanceByFromUserId(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[odachin.GetAllowanceByFromUserIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.allowance.AllowanceService.GetAllowanceByFromUserId is not implemented"))
}

func (UnimplementedAllowanceServiceHandler) Allowance(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("odachin.allowance.AllowanceService.Allowance is not implemented"))
}
