// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/odachin/odachin.proto

package odachin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OdachinService_CreateUser_FullMethodName = "/odachin.OdachinService/CreateUser"
)

// OdachinServiceClient is the client API for OdachinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OdachinServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
}

type odachinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOdachinServiceClient(cc grpc.ClientConnInterface) OdachinServiceClient {
	return &odachinServiceClient{cc}
}

func (c *odachinServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, OdachinService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OdachinServiceServer is the server API for OdachinService service.
// All implementations must embed UnimplementedOdachinServiceServer
// for forward compatibility
type OdachinServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	mustEmbedUnimplementedOdachinServiceServer()
}

// UnimplementedOdachinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOdachinServiceServer struct {
}

func (UnimplementedOdachinServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedOdachinServiceServer) mustEmbedUnimplementedOdachinServiceServer() {}

// UnsafeOdachinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OdachinServiceServer will
// result in compilation errors.
type UnsafeOdachinServiceServer interface {
	mustEmbedUnimplementedOdachinServiceServer()
}

func RegisterOdachinServiceServer(s grpc.ServiceRegistrar, srv OdachinServiceServer) {
	s.RegisterService(&OdachinService_ServiceDesc, srv)
}

func _OdachinService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OdachinService_ServiceDesc is the grpc.ServiceDesc for OdachinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OdachinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odachin.OdachinService",
	HandlerType: (*OdachinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _OdachinService_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/odachin/odachin.proto",
}
