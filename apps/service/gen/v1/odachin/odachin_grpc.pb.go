// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/odachin/odachin.proto

package odachin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OdachinService_CreateUser_FullMethodName        = "/odachin.OdachinService/CreateUser"
	OdachinService_UpdateUser_FullMethodName        = "/odachin.OdachinService/UpdateUser"
	OdachinService_Login_FullMethodName             = "/odachin.OdachinService/Login"
	OdachinService_CreateGroup_FullMethodName       = "/odachin.OdachinService/CreateGroup"
	OdachinService_InviteUser_FullMethodName        = "/odachin.OdachinService/InviteUser"
	OdachinService_AcceptInvitation_FullMethodName  = "/odachin.OdachinService/AcceptInvitation"
	OdachinService_RegisterReward_FullMethodName    = "/odachin.OdachinService/RegisterReward"
	OdachinService_DeleteReward_FullMethodName      = "/odachin.OdachinService/DeleteReward"
	OdachinService_RegisterAllowance_FullMethodName = "/odachin.OdachinService/RegisterAllowance"
	OdachinService_UpdateAllowance_FullMethodName   = "/odachin.OdachinService/UpdateAllowance"
	OdachinService_GetUserInfo_FullMethodName       = "/odachin.OdachinService/GetUserInfo"
	OdachinService_GetOwnInfo_FullMethodName        = "/odachin.OdachinService/GetOwnInfo"
	OdachinService_GetRewardList_FullMethodName     = "/odachin.OdachinService/GetRewardList"
)

// OdachinServiceClient is the client API for OdachinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OdachinServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// TODO 未テスト
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RegisterReward(ctx context.Context, in *RegisterRewardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteReward(ctx context.Context, in *DeleteRewardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RegisterAllowance(ctx context.Context, in *RegisterAllowanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAllowance(ctx context.Context, in *UpdateAllowanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	GetOwnInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetOwnInfoResponse, error)
	GetRewardList(ctx context.Context, in *GetRewardListRequest, opts ...grpc.CallOption) (*GetRewardListResponse, error)
}

type odachinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOdachinServiceClient(cc grpc.ClientConnInterface) OdachinServiceClient {
	return &odachinServiceClient{cc}
}

func (c *odachinServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, OdachinService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odachinServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OdachinService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odachinServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, OdachinService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odachinServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OdachinService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odachinServiceClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OdachinService_InviteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odachinServiceClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OdachinService_AcceptInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odachinServiceClient) RegisterReward(ctx context.Context, in *RegisterRewardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OdachinService_RegisterReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odachinServiceClient) DeleteReward(ctx context.Context, in *DeleteRewardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OdachinService_DeleteReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odachinServiceClient) RegisterAllowance(ctx context.Context, in *RegisterAllowanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OdachinService_RegisterAllowance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odachinServiceClient) UpdateAllowance(ctx context.Context, in *UpdateAllowanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OdachinService_UpdateAllowance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odachinServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, OdachinService_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odachinServiceClient) GetOwnInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetOwnInfoResponse, error) {
	out := new(GetOwnInfoResponse)
	err := c.cc.Invoke(ctx, OdachinService_GetOwnInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odachinServiceClient) GetRewardList(ctx context.Context, in *GetRewardListRequest, opts ...grpc.CallOption) (*GetRewardListResponse, error) {
	out := new(GetRewardListResponse)
	err := c.cc.Invoke(ctx, OdachinService_GetRewardList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OdachinServiceServer is the server API for OdachinService service.
// All implementations must embed UnimplementedOdachinServiceServer
// for forward compatibility
type OdachinServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// TODO 未テスト
	UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*emptypb.Empty, error)
	InviteUser(context.Context, *InviteUserRequest) (*emptypb.Empty, error)
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*emptypb.Empty, error)
	RegisterReward(context.Context, *RegisterRewardRequest) (*emptypb.Empty, error)
	DeleteReward(context.Context, *DeleteRewardRequest) (*emptypb.Empty, error)
	RegisterAllowance(context.Context, *RegisterAllowanceRequest) (*emptypb.Empty, error)
	UpdateAllowance(context.Context, *UpdateAllowanceRequest) (*emptypb.Empty, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	GetOwnInfo(context.Context, *emptypb.Empty) (*GetOwnInfoResponse, error)
	GetRewardList(context.Context, *GetRewardListRequest) (*GetRewardListResponse, error)
	mustEmbedUnimplementedOdachinServiceServer()
}

// UnimplementedOdachinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOdachinServiceServer struct {
}

func (UnimplementedOdachinServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedOdachinServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedOdachinServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedOdachinServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedOdachinServiceServer) InviteUser(context.Context, *InviteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (UnimplementedOdachinServiceServer) AcceptInvitation(context.Context, *AcceptInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedOdachinServiceServer) RegisterReward(context.Context, *RegisterRewardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterReward not implemented")
}
func (UnimplementedOdachinServiceServer) DeleteReward(context.Context, *DeleteRewardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReward not implemented")
}
func (UnimplementedOdachinServiceServer) RegisterAllowance(context.Context, *RegisterAllowanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAllowance not implemented")
}
func (UnimplementedOdachinServiceServer) UpdateAllowance(context.Context, *UpdateAllowanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllowance not implemented")
}
func (UnimplementedOdachinServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedOdachinServiceServer) GetOwnInfo(context.Context, *emptypb.Empty) (*GetOwnInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnInfo not implemented")
}
func (UnimplementedOdachinServiceServer) GetRewardList(context.Context, *GetRewardListRequest) (*GetRewardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardList not implemented")
}
func (UnimplementedOdachinServiceServer) mustEmbedUnimplementedOdachinServiceServer() {}

// UnsafeOdachinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OdachinServiceServer will
// result in compilation errors.
type UnsafeOdachinServiceServer interface {
	mustEmbedUnimplementedOdachinServiceServer()
}

func RegisterOdachinServiceServer(s grpc.ServiceRegistrar, srv OdachinServiceServer) {
	s.RegisterService(&OdachinService_ServiceDesc, srv)
}

func _OdachinService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdachinService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdachinService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdachinService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdachinService_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_InviteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdachinService_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdachinService_RegisterReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).RegisterReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_RegisterReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).RegisterReward(ctx, req.(*RegisterRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdachinService_DeleteReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).DeleteReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_DeleteReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).DeleteReward(ctx, req.(*DeleteRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdachinService_RegisterAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).RegisterAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_RegisterAllowance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).RegisterAllowance(ctx, req.(*RegisterAllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdachinService_UpdateAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).UpdateAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_UpdateAllowance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).UpdateAllowance(ctx, req.(*UpdateAllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdachinService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdachinService_GetOwnInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).GetOwnInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_GetOwnInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).GetOwnInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdachinService_GetRewardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdachinServiceServer).GetRewardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdachinService_GetRewardList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdachinServiceServer).GetRewardList(ctx, req.(*GetRewardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OdachinService_ServiceDesc is the grpc.ServiceDesc for OdachinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OdachinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odachin.OdachinService",
	HandlerType: (*OdachinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _OdachinService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _OdachinService_UpdateUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _OdachinService_Login_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _OdachinService_CreateGroup_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _OdachinService_InviteUser_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _OdachinService_AcceptInvitation_Handler,
		},
		{
			MethodName: "RegisterReward",
			Handler:    _OdachinService_RegisterReward_Handler,
		},
		{
			MethodName: "DeleteReward",
			Handler:    _OdachinService_DeleteReward_Handler,
		},
		{
			MethodName: "RegisterAllowance",
			Handler:    _OdachinService_RegisterAllowance_Handler,
		},
		{
			MethodName: "UpdateAllowance",
			Handler:    _OdachinService_UpdateAllowance_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _OdachinService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetOwnInfo",
			Handler:    _OdachinService_GetOwnInfo_Handler,
		},
		{
			MethodName: "GetRewardList",
			Handler:    _OdachinService_GetRewardList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/odachin/odachin.proto",
}
