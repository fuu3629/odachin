// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: v1/odachin/reward.proto

package odachin

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Reward_Type int32

const (
	Reward_DAILY   Reward_Type = 0 // 毎日
	Reward_WEEKLY  Reward_Type = 1 // 毎週
	Reward_MONTHLY Reward_Type = 2 // 毎月
)

// Enum value maps for Reward_Type.
var (
	Reward_Type_name = map[int32]string{
		0: "DAILY",
		1: "WEEKLY",
		2: "MONTHLY",
	}
	Reward_Type_value = map[string]int32{
		"DAILY":   0,
		"WEEKLY":  1,
		"MONTHLY": 2,
	}
)

func (x Reward_Type) Enum() *Reward_Type {
	p := new(Reward_Type)
	*p = x
	return p
}

func (x Reward_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reward_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_odachin_reward_proto_enumTypes[0].Descriptor()
}

func (Reward_Type) Type() protoreflect.EnumType {
	return &file_v1_odachin_reward_proto_enumTypes[0]
}

func (x Reward_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reward_Type.Descriptor instead.
func (Reward_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{0, 0}
}

type Reward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reward) Reset() {
	*x = Reward{}
	mi := &file_v1_odachin_reward_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{0}
}

type RewardInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RewardPeriodId uint64                 `protobuf:"varint,1,opt,name=reward_period_id,json=rewardPeriodId,proto3" json:"reward_period_id,omitempty"`
	FromUserId     string                 `protobuf:"bytes,2,opt,name=from_user_id,json=fromUserId,proto3" json:"from_user_id,omitempty"`
	ToUserId       string                 `protobuf:"bytes,3,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id,omitempty"`
	Amount         int32                  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	RewardType     Reward_Type            `protobuf:"varint,5,opt,name=reward_type,json=rewardType,proto3,enum=odachin.reward.Reward_Type" json:"reward_type,omitempty"`
	Title          string                 `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Description    string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Status         string                 `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RewardInfo) Reset() {
	*x = RewardInfo{}
	mi := &file_v1_odachin_reward_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardInfo) ProtoMessage() {}

func (x *RewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardInfo.ProtoReflect.Descriptor instead.
func (*RewardInfo) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{1}
}

func (x *RewardInfo) GetRewardPeriodId() uint64 {
	if x != nil {
		return x.RewardPeriodId
	}
	return 0
}

func (x *RewardInfo) GetFromUserId() string {
	if x != nil {
		return x.FromUserId
	}
	return ""
}

func (x *RewardInfo) GetToUserId() string {
	if x != nil {
		return x.ToUserId
	}
	return ""
}

func (x *RewardInfo) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RewardInfo) GetRewardType() Reward_Type {
	if x != nil {
		return x.RewardType
	}
	return Reward_DAILY
}

func (x *RewardInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RewardInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RewardInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RewardInfo) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *RewardInfo) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type RegisterRewardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToUserId      string                 `protobuf:"bytes,1,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id,omitempty"`
	Amount        int32                  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	RewardType    Reward_Type            `protobuf:"varint,3,opt,name=reward_type,json=rewardType,proto3,enum=odachin.reward.Reward_Type" json:"reward_type,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRewardRequest) Reset() {
	*x = RegisterRewardRequest{}
	mi := &file_v1_odachin_reward_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRewardRequest) ProtoMessage() {}

func (x *RegisterRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRewardRequest.ProtoReflect.Descriptor instead.
func (*RegisterRewardRequest) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterRewardRequest) GetToUserId() string {
	if x != nil {
		return x.ToUserId
	}
	return ""
}

func (x *RegisterRewardRequest) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RegisterRewardRequest) GetRewardType() Reward_Type {
	if x != nil {
		return x.RewardType
	}
	return Reward_DAILY
}

func (x *RegisterRewardRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RegisterRewardRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DeleteRewardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RewardId      uint64                 `protobuf:"varint,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRewardRequest) Reset() {
	*x = DeleteRewardRequest{}
	mi := &file_v1_odachin_reward_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRewardRequest) ProtoMessage() {}

func (x *DeleteRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRewardRequest.ProtoReflect.Descriptor instead.
func (*DeleteRewardRequest) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteRewardRequest) GetRewardId() uint64 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

type GetRewardListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RewardType    Reward_Type            `protobuf:"varint,1,opt,name=reward_type,json=rewardType,proto3,enum=odachin.reward.Reward_Type" json:"reward_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRewardListRequest) Reset() {
	*x = GetRewardListRequest{}
	mi := &file_v1_odachin_reward_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRewardListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardListRequest) ProtoMessage() {}

func (x *GetRewardListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardListRequest.ProtoReflect.Descriptor instead.
func (*GetRewardListRequest) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{4}
}

func (x *GetRewardListRequest) GetRewardType() Reward_Type {
	if x != nil {
		return x.RewardType
	}
	return Reward_DAILY
}

type GetRewardListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RewardList    []*RewardInfo          `protobuf:"bytes,1,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRewardListResponse) Reset() {
	*x = GetRewardListResponse{}
	mi := &file_v1_odachin_reward_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRewardListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardListResponse) ProtoMessage() {}

func (x *GetRewardListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardListResponse.ProtoReflect.Descriptor instead.
func (*GetRewardListResponse) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{5}
}

func (x *GetRewardListResponse) GetRewardList() []*RewardInfo {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type GetChildRewardListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChildId       string                 `protobuf:"bytes,1,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	RewardType    Reward_Type            `protobuf:"varint,2,opt,name=reward_type,json=rewardType,proto3,enum=odachin.reward.Reward_Type" json:"reward_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChildRewardListRequest) Reset() {
	*x = GetChildRewardListRequest{}
	mi := &file_v1_odachin_reward_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChildRewardListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChildRewardListRequest) ProtoMessage() {}

func (x *GetChildRewardListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChildRewardListRequest.ProtoReflect.Descriptor instead.
func (*GetChildRewardListRequest) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{6}
}

func (x *GetChildRewardListRequest) GetChildId() string {
	if x != nil {
		return x.ChildId
	}
	return ""
}

func (x *GetChildRewardListRequest) GetRewardType() Reward_Type {
	if x != nil {
		return x.RewardType
	}
	return Reward_DAILY
}

type GetChildRewardListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RewardList    []*RewardInfo          `protobuf:"bytes,1,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChildRewardListResponse) Reset() {
	*x = GetChildRewardListResponse{}
	mi := &file_v1_odachin_reward_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChildRewardListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChildRewardListResponse) ProtoMessage() {}

func (x *GetChildRewardListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChildRewardListResponse.ProtoReflect.Descriptor instead.
func (*GetChildRewardListResponse) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{7}
}

func (x *GetChildRewardListResponse) GetRewardList() []*RewardInfo {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type GetUncompletedRewardCountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DailyCount    uint32                 `protobuf:"varint,1,opt,name=daily_count,json=dailyCount,proto3" json:"daily_count,omitempty"`
	WeeklyCount   uint32                 `protobuf:"varint,2,opt,name=weekly_count,json=weeklyCount,proto3" json:"weekly_count,omitempty"`
	MonthlyCount  uint32                 `protobuf:"varint,3,opt,name=monthly_count,json=monthlyCount,proto3" json:"monthly_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUncompletedRewardCountResponse) Reset() {
	*x = GetUncompletedRewardCountResponse{}
	mi := &file_v1_odachin_reward_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUncompletedRewardCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUncompletedRewardCountResponse) ProtoMessage() {}

func (x *GetUncompletedRewardCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUncompletedRewardCountResponse.ProtoReflect.Descriptor instead.
func (*GetUncompletedRewardCountResponse) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{8}
}

func (x *GetUncompletedRewardCountResponse) GetDailyCount() uint32 {
	if x != nil {
		return x.DailyCount
	}
	return 0
}

func (x *GetUncompletedRewardCountResponse) GetWeeklyCount() uint32 {
	if x != nil {
		return x.WeeklyCount
	}
	return 0
}

func (x *GetUncompletedRewardCountResponse) GetMonthlyCount() uint32 {
	if x != nil {
		return x.MonthlyCount
	}
	return 0
}

type ReportRewardRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RewardPeriodId uint64                 `protobuf:"varint,1,opt,name=reward_period_id,json=rewardPeriodId,proto3" json:"reward_period_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReportRewardRequest) Reset() {
	*x = ReportRewardRequest{}
	mi := &file_v1_odachin_reward_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRewardRequest) ProtoMessage() {}

func (x *ReportRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRewardRequest.ProtoReflect.Descriptor instead.
func (*ReportRewardRequest) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{9}
}

func (x *ReportRewardRequest) GetRewardPeriodId() uint64 {
	if x != nil {
		return x.RewardPeriodId
	}
	return 0
}

type GetReportedRewardListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RewardList    []*RewardInfo          `protobuf:"bytes,1,rep,name=reward_list,json=rewardList,proto3" json:"reward_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReportedRewardListResponse) Reset() {
	*x = GetReportedRewardListResponse{}
	mi := &file_v1_odachin_reward_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReportedRewardListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportedRewardListResponse) ProtoMessage() {}

func (x *GetReportedRewardListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportedRewardListResponse.ProtoReflect.Descriptor instead.
func (*GetReportedRewardListResponse) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{10}
}

func (x *GetReportedRewardListResponse) GetRewardList() []*RewardInfo {
	if x != nil {
		return x.RewardList
	}
	return nil
}

type ApproveRewardRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RewardPeriodId uint64                 `protobuf:"varint,1,opt,name=reward_period_id,json=rewardPeriodId,proto3" json:"reward_period_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ApproveRewardRequest) Reset() {
	*x = ApproveRewardRequest{}
	mi := &file_v1_odachin_reward_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveRewardRequest) ProtoMessage() {}

func (x *ApproveRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveRewardRequest.ProtoReflect.Descriptor instead.
func (*ApproveRewardRequest) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{11}
}

func (x *ApproveRewardRequest) GetRewardPeriodId() uint64 {
	if x != nil {
		return x.RewardPeriodId
	}
	return 0
}

type RejectRewardRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RewardPeriodId uint64                 `protobuf:"varint,1,opt,name=reward_period_id,json=rewardPeriodId,proto3" json:"reward_period_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RejectRewardRequest) Reset() {
	*x = RejectRewardRequest{}
	mi := &file_v1_odachin_reward_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectRewardRequest) ProtoMessage() {}

func (x *RejectRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_odachin_reward_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectRewardRequest.ProtoReflect.Descriptor instead.
func (*RejectRewardRequest) Descriptor() ([]byte, []int) {
	return file_v1_odachin_reward_proto_rawDescGZIP(), []int{12}
}

func (x *RejectRewardRequest) GetRewardPeriodId() uint64 {
	if x != nil {
		return x.RewardPeriodId
	}
	return 0
}

var File_v1_odachin_reward_proto protoreflect.FileDescriptor

var file_v1_odachin_reward_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x76, 0x31, 0x2f, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6f, 0x64, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x2a,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x02, 0x22, 0xd7, 0x03, 0x0a, 0x0a, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x10, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0c,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x46, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x64,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x8c, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x48, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02,
	0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x49, 0x64, 0x22, 0x48, 0x0a, 0x13, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x64, 0x32, 0xe3, 0x06, 0x0a,
	0x0d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x6f, 0x64, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x6f, 0x64, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x6f, 0x64, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x66, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x31, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x6f, 0x64, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x2e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x42, 0xb2, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x75, 0x75, 0x33, 0x36, 0x32, 0x39, 0x2f, 0x6f, 0x64, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0xa2, 0x02, 0x03, 0x4f, 0x52, 0x58, 0xaa, 0x02, 0x0e, 0x4f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0xca, 0x02, 0x0e, 0x4f, 0x64, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x5c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0xe2, 0x02, 0x1a, 0x4f, 0x64, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x5c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x4f, 0x64, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x3a,
	0x3a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_v1_odachin_reward_proto_rawDescOnce sync.Once
	file_v1_odachin_reward_proto_rawDescData []byte
)

func file_v1_odachin_reward_proto_rawDescGZIP() []byte {
	file_v1_odachin_reward_proto_rawDescOnce.Do(func() {
		file_v1_odachin_reward_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_odachin_reward_proto_rawDesc), len(file_v1_odachin_reward_proto_rawDesc)))
	})
	return file_v1_odachin_reward_proto_rawDescData
}

var file_v1_odachin_reward_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_odachin_reward_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_v1_odachin_reward_proto_goTypes = []any{
	(Reward_Type)(0),                          // 0: odachin.reward.Reward.Type
	(*Reward)(nil),                            // 1: odachin.reward.Reward
	(*RewardInfo)(nil),                        // 2: odachin.reward.RewardInfo
	(*RegisterRewardRequest)(nil),             // 3: odachin.reward.RegisterRewardRequest
	(*DeleteRewardRequest)(nil),               // 4: odachin.reward.DeleteRewardRequest
	(*GetRewardListRequest)(nil),              // 5: odachin.reward.GetRewardListRequest
	(*GetRewardListResponse)(nil),             // 6: odachin.reward.GetRewardListResponse
	(*GetChildRewardListRequest)(nil),         // 7: odachin.reward.GetChildRewardListRequest
	(*GetChildRewardListResponse)(nil),        // 8: odachin.reward.GetChildRewardListResponse
	(*GetUncompletedRewardCountResponse)(nil), // 9: odachin.reward.GetUncompletedRewardCountResponse
	(*ReportRewardRequest)(nil),               // 10: odachin.reward.ReportRewardRequest
	(*GetReportedRewardListResponse)(nil),     // 11: odachin.reward.GetReportedRewardListResponse
	(*ApproveRewardRequest)(nil),              // 12: odachin.reward.ApproveRewardRequest
	(*RejectRewardRequest)(nil),               // 13: odachin.reward.RejectRewardRequest
	(*timestamppb.Timestamp)(nil),             // 14: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                     // 15: google.protobuf.Empty
}
var file_v1_odachin_reward_proto_depIdxs = []int32{
	0,  // 0: odachin.reward.RewardInfo.reward_type:type_name -> odachin.reward.Reward.Type
	14, // 1: odachin.reward.RewardInfo.start_date:type_name -> google.protobuf.Timestamp
	14, // 2: odachin.reward.RewardInfo.end_date:type_name -> google.protobuf.Timestamp
	0,  // 3: odachin.reward.RegisterRewardRequest.reward_type:type_name -> odachin.reward.Reward.Type
	0,  // 4: odachin.reward.GetRewardListRequest.reward_type:type_name -> odachin.reward.Reward.Type
	2,  // 5: odachin.reward.GetRewardListResponse.reward_list:type_name -> odachin.reward.RewardInfo
	0,  // 6: odachin.reward.GetChildRewardListRequest.reward_type:type_name -> odachin.reward.Reward.Type
	2,  // 7: odachin.reward.GetChildRewardListResponse.reward_list:type_name -> odachin.reward.RewardInfo
	2,  // 8: odachin.reward.GetReportedRewardListResponse.reward_list:type_name -> odachin.reward.RewardInfo
	15, // 9: odachin.reward.RewardService.Reward:input_type -> google.protobuf.Empty
	3,  // 10: odachin.reward.RewardService.RegisterReward:input_type -> odachin.reward.RegisterRewardRequest
	4,  // 11: odachin.reward.RewardService.DeleteReward:input_type -> odachin.reward.DeleteRewardRequest
	5,  // 12: odachin.reward.RewardService.GetRewardList:input_type -> odachin.reward.GetRewardListRequest
	7,  // 13: odachin.reward.RewardService.GetChildRewardList:input_type -> odachin.reward.GetChildRewardListRequest
	15, // 14: odachin.reward.RewardService.GetUncompletedRewardCount:input_type -> google.protobuf.Empty
	10, // 15: odachin.reward.RewardService.ReportReward:input_type -> odachin.reward.ReportRewardRequest
	15, // 16: odachin.reward.RewardService.GetReportedRewardList:input_type -> google.protobuf.Empty
	12, // 17: odachin.reward.RewardService.ApproveReward:input_type -> odachin.reward.ApproveRewardRequest
	13, // 18: odachin.reward.RewardService.RejectReward:input_type -> odachin.reward.RejectRewardRequest
	15, // 19: odachin.reward.RewardService.Reward:output_type -> google.protobuf.Empty
	15, // 20: odachin.reward.RewardService.RegisterReward:output_type -> google.protobuf.Empty
	15, // 21: odachin.reward.RewardService.DeleteReward:output_type -> google.protobuf.Empty
	6,  // 22: odachin.reward.RewardService.GetRewardList:output_type -> odachin.reward.GetRewardListResponse
	8,  // 23: odachin.reward.RewardService.GetChildRewardList:output_type -> odachin.reward.GetChildRewardListResponse
	9,  // 24: odachin.reward.RewardService.GetUncompletedRewardCount:output_type -> odachin.reward.GetUncompletedRewardCountResponse
	15, // 25: odachin.reward.RewardService.ReportReward:output_type -> google.protobuf.Empty
	11, // 26: odachin.reward.RewardService.GetReportedRewardList:output_type -> odachin.reward.GetReportedRewardListResponse
	15, // 27: odachin.reward.RewardService.ApproveReward:output_type -> google.protobuf.Empty
	15, // 28: odachin.reward.RewardService.RejectReward:output_type -> google.protobuf.Empty
	19, // [19:29] is the sub-list for method output_type
	9,  // [9:19] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_v1_odachin_reward_proto_init() }
func file_v1_odachin_reward_proto_init() {
	if File_v1_odachin_reward_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_odachin_reward_proto_rawDesc), len(file_v1_odachin_reward_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_odachin_reward_proto_goTypes,
		DependencyIndexes: file_v1_odachin_reward_proto_depIdxs,
		EnumInfos:         file_v1_odachin_reward_proto_enumTypes,
		MessageInfos:      file_v1_odachin_reward_proto_msgTypes,
	}.Build()
	File_v1_odachin_reward_proto = out.File
	file_v1_odachin_reward_proto_goTypes = nil
	file_v1_odachin_reward_proto_depIdxs = nil
}
